
HumidSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000075e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000007d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a50  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b24  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4d  00000000  00000000  00003f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  00004da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fd  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e06  00000000  00000000  00005c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008a6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
   2:	00 00       	nop
   4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
   6:	00 00       	nop
   8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c1       	rjmp	.+636    	; 0x2a6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
  36:	00 00       	nop
  38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
  72:	00 00       	nop
  74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
  76:	00 00       	nop
  78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
  82:	00 00       	nop
  84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
  86:	00 00       	nop
  88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
	...

0000008c <FONT_CHARS>:
  8c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  9c:	7f 14 7f 14 12 2a 7f 2a 24 62 64 08 13 23 50 22     .....*.*$bd..#P"
  ac:	55 49 36 00 05 03 00 00 00 41 22 1c 00 00 1c 22     UI6......A"...."
  bc:	41 00 08 2a 1c 2a 08 08 08 3e 08 08 00 00 30 50     A..*.*...>....0P
  cc:	00 08 08 08 08 08 00 60 60 00 00 02 04 08 10 20     .......``...... 
  dc:	3e 45 49 51 3e 00 40 7f 42 00 46 49 51 61 42 31     >EIQ>.@.B.FIQaB1
  ec:	4b 45 41 21 10 7f 12 14 18 39 45 45 45 27 30 49     KEA!.....9EEE'0I
  fc:	49 4a 3c 03 05 09 71 01 36 49 49 49 36 1e 29 49     IJ<...q.6III6.)I
 10c:	49 06 00 36 36 00 00 00 00 36 56 00 41 22 14 08     I..66....6V.A"..
 11c:	00 14 14 14 14 14 00 08 14 22 41 06 09 51 01 02     ........."A..Q..
 12c:	3e 41 79 49 32 7e 11 11 11 7e 36 49 49 49 7f 22     >AyI2~...~6III."
 13c:	41 41 41 3e 1c 22 41 41 7f 41 49 49 49 7f 01 01     AAA>."AA.AIII...
 14c:	09 09 7f 32 51 41 41 3e 7f 08 08 08 7f 00 41 7f     ...2QAA>......A.
 15c:	41 00 01 3f 41 40 20 41 22 14 08 7f 40 40 40 40     A..?A@ A"...@@@@
 16c:	7f 7f 02 04 02 7f 7f 10 08 04 7f 3e 41 41 41 3e     ...........>AAA>
 17c:	06 09 09 09 7f 5e 21 51 41 3e 46 29 19 09 7f 31     .....^!QA>F)...1
 18c:	49 49 49 46 01 01 7f 01 01 3f 40 40 40 3f 1f 20     IIIF.....?@@@?. 
 19c:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
 1ac:	04 03 43 45 49 51 61 41 41 7f 00 00 20 10 08 04     ..CEIQaAA... ...
 1bc:	02 00 00 7f 41 41 04 02 01 02 04 40 40 40 40 40     ....AA.....@@@@@
 1cc:	00 04 02 01 00 78 54 54 54 20 38 44 44 48 7f 20     .....xTTT 8DDH. 
 1dc:	44 44 44 38 7f 44 44 48 38 18 54 54 54 38 02 01     DDD8.DDH8.TTT8..
 1ec:	09 7e 08 3c 54 54 14 08 78 04 04 08 7f 00 40 7d     .~.<TT..x.....@}
 1fc:	44 00 00 3d 44 40 20 44 28 10 7f 00 00 40 7f 41     D..=D@ D(....@.A
 20c:	00 78 04 18 04 7c 78 04 04 08 7c 38 44 44 44 38     .x...|x...|8DDD8
 21c:	08 14 14 14 7c 7c 18 14 14 08 08 04 04 08 7c 20     ....||........| 
 22c:	54 54 54 48 20 40 44 3f 04 7c 20 40 40 3c 1c 20     TTTH @D?.| @@<. 
 23c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 3c 50 50     @ .<@0@<D(.(D<PP
 24c:	50 0c 44 4c 54 64 44 00 41 36 08 00 00 00 7f 00     P.DLTdD.A6......
 25c:	00 00 08 36 41 00 08 1c 2a 08 08 08 08 2a 1c 08     ...6A...*....*..

0000026c <__ctors_end>:
 26c:	11 24       	eor	r1, r1
 26e:	1f be       	out	0x3f, r1	; 63
 270:	cf ef       	ldi	r28, 0xFF	; 255
 272:	d0 e4       	ldi	r29, 0x40	; 64
 274:	de bf       	out	0x3e, r29	; 62
 276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_clear_bss>:
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	01 c0       	rjmp	.+2      	; 0x282 <.do_clear_bss_start>

00000280 <.do_clear_bss_loop>:
 280:	1d 92       	st	X+, r1

00000282 <.do_clear_bss_start>:
 282:	a4 30       	cpi	r26, 0x04	; 4
 284:	b2 07       	cpc	r27, r18
 286:	e1 f7       	brne	.-8      	; 0x280 <.do_clear_bss_loop>

00000288 <__do_copy_data>:
 288:	11 e0       	ldi	r17, 0x01	; 1
 28a:	a0 e0       	ldi	r26, 0x00	; 0
 28c:	b1 e0       	ldi	r27, 0x01	; 1
 28e:	ee e5       	ldi	r30, 0x5E	; 94
 290:	f7 e0       	ldi	r31, 0x07	; 7
 292:	00 e0       	ldi	r16, 0x00	; 0
 294:	0b bf       	out	0x3b, r16	; 59
 296:	02 c0       	rjmp	.+4      	; 0x29c <__do_copy_data+0x14>
 298:	07 90       	elpm	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	a0 30       	cpi	r26, 0x00	; 0
 29e:	b1 07       	cpc	r27, r17
 2a0:	d9 f7       	brne	.-10     	; 0x298 <__do_copy_data+0x10>
 2a2:	b1 d1       	rcall	.+866    	; 0x606 <main>
 2a4:	5a c2       	rjmp	.+1204   	; 0x75a <_exit>

000002a6 <__bad_interrupt>:
 2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <SetupPorts>:
 int y= i / 40;
 char ascii = (i % 96)+32;
 PutCh(ascii,x*6,y*8,CYAN);
 }
 msDelay(2000);
}
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	84 b9       	out	0x04, r24	; 4
 2ac:	17 b8       	out	0x07, r1	; 7
 2ae:	28 9a       	sbi	0x05, 0	; 5
 2b0:	08 95       	ret

000002b2 <msDelay>:
 2b2:	18 16       	cp	r1, r24
 2b4:	19 06       	cpc	r1, r25
 2b6:	6c f4       	brge	.+26     	; 0x2d2 <msDelay+0x20>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	e9 ef       	ldi	r30, 0xF9	; 249
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <msDelay+0xe>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <msDelay+0x14>
 2c6:	00 00       	nop
 2c8:	2f 5f       	subi	r18, 0xFF	; 255
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
 2cc:	82 17       	cp	r24, r18
 2ce:	93 07       	cpc	r25, r19
 2d0:	a9 f7       	brne	.-22     	; 0x2bc <msDelay+0xa>
 2d2:	08 95       	ret

000002d4 <OpenSPI>:
 2d4:	80 e5       	ldi	r24, 0x50	; 80
 2d6:	8c bd       	out	0x2c, r24	; 44
 2d8:	8d b5       	in	r24, 0x2d	; 45
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	8d bd       	out	0x2d, r24	; 45
 2de:	08 95       	ret

000002e0 <Xfer>:
 2e0:	8e bd       	out	0x2e, r24	; 46
 2e2:	0d b4       	in	r0, 0x2d	; 45
 2e4:	07 fe       	sbrs	r0, 7
 2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <Xfer+0x2>
 2e8:	8e b5       	in	r24, 0x2e	; 46
 2ea:	08 95       	ret

000002ec <WriteCmd>:
 2ec:	29 98       	cbi	0x05, 1	; 5
 2ee:	f8 df       	rcall	.-16     	; 0x2e0 <Xfer>
 2f0:	29 9a       	sbi	0x05, 1	; 5
 2f2:	08 95       	ret

000002f4 <WriteWord>:
 2f4:	cf 93       	push	r28
 2f6:	c8 2f       	mov	r28, r24
 2f8:	89 2f       	mov	r24, r25
 2fa:	f2 df       	rcall	.-28     	; 0x2e0 <Xfer>
 2fc:	8c 2f       	mov	r24, r28
 2fe:	f0 df       	rcall	.-32     	; 0x2e0 <Xfer>
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <HardwareReset>:
 304:	28 98       	cbi	0x05, 0	; 5
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	d3 df       	rcall	.-90     	; 0x2b2 <msDelay>
 30c:	28 9a       	sbi	0x05, 0	; 5
 30e:	86 e9       	ldi	r24, 0x96	; 150
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	cf cf       	rjmp	.-98     	; 0x2b2 <msDelay>
 314:	08 95       	ret

00000316 <InitDisplay>:
 316:	f6 df       	rcall	.-20     	; 0x304 <HardwareReset>
 318:	81 e1       	ldi	r24, 0x11	; 17
 31a:	e8 df       	rcall	.-48     	; 0x2ec <WriteCmd>
 31c:	86 e9       	ldi	r24, 0x96	; 150
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	c8 df       	rcall	.-112    	; 0x2b2 <msDelay>
 322:	8a e3       	ldi	r24, 0x3A	; 58
 324:	e3 df       	rcall	.-58     	; 0x2ec <WriteCmd>
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	db df       	rcall	.-74     	; 0x2e0 <Xfer>
 32a:	89 e2       	ldi	r24, 0x29	; 41
 32c:	df cf       	rjmp	.-66     	; 0x2ec <WriteCmd>
 32e:	08 95       	ret

00000330 <SetAddrWindow>:
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	6c 01       	movw	r12, r24
 342:	8b 01       	movw	r16, r22
 344:	7a 01       	movw	r14, r20
 346:	e9 01       	movw	r28, r18
 348:	8a e2       	ldi	r24, 0x2A	; 42
 34a:	d0 df       	rcall	.-96     	; 0x2ec <WriteCmd>
 34c:	c6 01       	movw	r24, r12
 34e:	d2 df       	rcall	.-92     	; 0x2f4 <WriteWord>
 350:	c7 01       	movw	r24, r14
 352:	d0 df       	rcall	.-96     	; 0x2f4 <WriteWord>
 354:	8b e2       	ldi	r24, 0x2B	; 43
 356:	ca df       	rcall	.-108    	; 0x2ec <WriteCmd>
 358:	c8 01       	movw	r24, r16
 35a:	cc df       	rcall	.-104    	; 0x2f4 <WriteWord>
 35c:	ce 01       	movw	r24, r28
 35e:	ca df       	rcall	.-108    	; 0x2f4 <WriteWord>
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	df 90       	pop	r13
 36e:	cf 90       	pop	r12
 370:	08 95       	ret

00000372 <ClearScreen>:
 372:	2f e3       	ldi	r18, 0x3F	; 63
 374:	31 e0       	ldi	r19, 0x01	; 1
 376:	4f ee       	ldi	r20, 0xEF	; 239
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	d6 df       	rcall	.-84     	; 0x330 <SetAddrWindow>
 384:	8c e2       	ldi	r24, 0x2C	; 44
 386:	b2 df       	rcall	.-156    	; 0x2ec <WriteCmd>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	98 e5       	ldi	r25, 0x58	; 88
 38c:	a2 e0       	ldi	r26, 0x02	; 2
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	1e bc       	out	0x2e, r1	; 46
 392:	0d b4       	in	r0, 0x2d	; 45
 394:	07 fe       	sbrs	r0, 7
 396:	fd cf       	rjmp	.-6      	; 0x392 <ClearScreen+0x20>
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	a1 09       	sbc	r26, r1
 39c:	b1 09       	sbc	r27, r1
 39e:	c1 f7       	brne	.-16     	; 0x390 <ClearScreen+0x1e>
 3a0:	08 95       	ret

000003a2 <AdvanceCursor>:
 3a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 3a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 3b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 3b4:	88 97       	sbiw	r24, 0x28	; 40
 3b6:	6c f0       	brlt	.+26     	; 0x3d2 <AdvanceCursor+0x30>
 3b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <curY>
 3bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <curY+0x1>
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <curY+0x1>
 3c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <curY>
 3ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 3ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 3d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <curY>
 3d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <curY+0x1>
 3da:	88 97       	sbiw	r24, 0x28	; 40
 3dc:	24 f0       	brlt	.+8      	; 0x3e6 <AdvanceCursor+0x44>
 3de:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <curY+0x1>
 3e2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <curY>
 3e6:	08 95       	ret

000003e8 <SetOrientation>:
 3e8:	cf 93       	push	r28
 3ea:	84 3b       	cpi	r24, 0xB4	; 180
 3ec:	91 05       	cpc	r25, r1
 3ee:	41 f0       	breq	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f0:	8e 30       	cpi	r24, 0x0E	; 14
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	92 07       	cpc	r25, r18
 3f6:	31 f0       	breq	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f8:	8a 35       	cpi	r24, 0x5A	; 90
 3fa:	91 05       	cpc	r25, r1
 3fc:	29 f4       	brne	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 400:	c0 ec       	ldi	r28, 0xC0	; 192
 402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	c0 ea       	ldi	r28, 0xA0	; 160
 406:	03 c0       	rjmp	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 408:	c0 e0       	ldi	r28, 0x00	; 0
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	c0 e6       	ldi	r28, 0x60	; 96
 40e:	86 e3       	ldi	r24, 0x36	; 54
 410:	6d df       	rcall	.-294    	; 0x2ec <WriteCmd>
 412:	8c 2f       	mov	r24, r28
 414:	65 df       	rcall	.-310    	; 0x2e0 <Xfer>
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <PutCh>:
 41a:	8f 92       	push	r8
 41c:	9f 92       	push	r9
 41e:	af 92       	push	r10
 420:	bf 92       	push	r11
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	e8 2e       	mov	r14, r24
 434:	cb 01       	movw	r24, r22
 436:	ba 01       	movw	r22, r20
 438:	a2 2e       	mov	r10, r18
 43a:	b3 2e       	mov	r11, r19
 43c:	9a 01       	movw	r18, r20
 43e:	2a 5f       	subi	r18, 0xFA	; 250
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	ac 01       	movw	r20, r24
 444:	4c 5f       	subi	r20, 0xFC	; 252
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	73 df       	rcall	.-282    	; 0x330 <SetAddrWindow>
 44a:	8c e2       	ldi	r24, 0x2C	; 44
 44c:	4f df       	rcall	.-354    	; 0x2ec <WriteCmd>
 44e:	8e 2d       	mov	r24, r14
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	7c 01       	movw	r14, r24
 454:	ee 0c       	add	r14, r14
 456:	ff 1c       	adc	r15, r15
 458:	ee 0c       	add	r14, r14
 45a:	ff 1c       	adc	r15, r15
 45c:	e8 0e       	add	r14, r24
 45e:	f9 1e       	adc	r15, r25
 460:	0f 2e       	mov	r0, r31
 462:	f7 e0       	ldi	r31, 0x07	; 7
 464:	cf 2e       	mov	r12, r31
 466:	d1 2c       	mov	r13, r1
 468:	f0 2d       	mov	r31, r0
 46a:	01 e0       	ldi	r16, 0x01	; 1
 46c:	10 e0       	ldi	r17, 0x00	; 0
 46e:	80 ea       	ldi	r24, 0xA0	; 160
 470:	e8 1a       	sub	r14, r24
 472:	f1 08       	sbc	r15, r1
 474:	81 2c       	mov	r8, r1
 476:	91 2c       	mov	r9, r1
 478:	1b c0       	rjmp	.+54     	; 0x4b0 <PutCh+0x96>
 47a:	f7 01       	movw	r30, r14
 47c:	ec 0f       	add	r30, r28
 47e:	fd 1f       	adc	r31, r29
 480:	e4 57       	subi	r30, 0x74	; 116
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	e4 91       	lpm	r30, Z
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	e0 23       	and	r30, r16
 48a:	f1 23       	and	r31, r17
 48c:	ef 2b       	or	r30, r31
 48e:	19 f0       	breq	.+6      	; 0x496 <PutCh+0x7c>
 490:	8a 2d       	mov	r24, r10
 492:	9b 2d       	mov	r25, r11
 494:	02 c0       	rjmp	.+4      	; 0x49a <PutCh+0x80>
 496:	88 2d       	mov	r24, r8
 498:	99 2d       	mov	r25, r9
 49a:	2c df       	rcall	.-424    	; 0x2f4 <WriteWord>
 49c:	21 96       	adiw	r28, 0x01	; 1
 49e:	c5 30       	cpi	r28, 0x05	; 5
 4a0:	d1 05       	cpc	r29, r1
 4a2:	59 f7       	brne	.-42     	; 0x47a <PutCh+0x60>
 4a4:	00 0f       	add	r16, r16
 4a6:	11 1f       	adc	r17, r17
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	c8 1a       	sub	r12, r24
 4ac:	d1 08       	sbc	r13, r1
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <PutCh+0x9c>
 4b0:	c0 e0       	ldi	r28, 0x00	; 0
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	e2 cf       	rjmp	.-60     	; 0x47a <PutCh+0x60>
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	ff 90       	pop	r15
 4c0:	ef 90       	pop	r14
 4c2:	df 90       	pop	r13
 4c4:	cf 90       	pop	r12
 4c6:	bf 90       	pop	r11
 4c8:	af 90       	pop	r10
 4ca:	9f 90       	pop	r9
 4cc:	8f 90       	pop	r8
 4ce:	08 95       	ret

000004d0 <WriteChar>:
 4d0:	9b 01       	movw	r18, r22
 4d2:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <curY>
 4d6:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <curY+0x1>
 4da:	44 0f       	add	r20, r20
 4dc:	55 1f       	adc	r21, r21
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_end>
 4ea:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_end+0x1>
 4ee:	bf 01       	movw	r22, r30
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	e6 0f       	add	r30, r22
 4f6:	f7 1f       	adc	r31, r23
 4f8:	bf 01       	movw	r22, r30
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	8d df       	rcall	.-230    	; 0x41a <PutCh>
 500:	50 cf       	rjmp	.-352    	; 0x3a2 <AdvanceCursor>
 502:	08 95       	ret

00000504 <WriteString>:
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	ec 01       	movw	r28, r24
 50e:	88 81       	ld	r24, Y
 510:	88 23       	and	r24, r24
 512:	39 f0       	breq	.+14     	; 0x522 <WriteString+0x1e>
 514:	8b 01       	movw	r16, r22
 516:	21 96       	adiw	r28, 0x01	; 1
 518:	b8 01       	movw	r22, r16
 51a:	da df       	rcall	.-76     	; 0x4d0 <WriteChar>
 51c:	89 91       	ld	r24, Y+
 51e:	81 11       	cpse	r24, r1
 520:	fb cf       	rjmp	.-10     	; 0x518 <WriteString+0x14>
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	08 95       	ret

0000052c <WriteInt>:
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	28 97       	sbiw	r28, 0x08	; 8
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	4a e0       	ldi	r20, 0x0A	; 10
 542:	be 01       	movw	r22, r28
 544:	6f 5f       	subi	r22, 0xFF	; 255
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	d5 d0       	rcall	.+426    	; 0x6f4 <__itoa_ncheck>
 54a:	6f ef       	ldi	r22, 0xFF	; 255
 54c:	7f ef       	ldi	r23, 0xFF	; 255
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	d8 df       	rcall	.-80     	; 0x504 <WriteString>
 554:	28 96       	adiw	r28, 0x08	; 8
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <I2C_Init>:

void I2C_Init()
// at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
// so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
{
	TWSR = 0; // set prescalar to zero
 566:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = ((F_CPU/F_SCL)-16)/2; // set SCL frequency in TWI bit register
 56a:	89 e3       	ldi	r24, 0x39	; 57
 56c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 570:	08 95       	ret

00000572 <I2C_Start>:
}

byte I2C_Start()
// generate a TW start condition
{
	TWCR = TW_START; // send start condition
 572:	84 ea       	ldi	r24, 0xA4	; 164
 574:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY); // wait
 578:	ec eb       	ldi	r30, 0xBC	; 188
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	88 23       	and	r24, r24
 580:	ec f7       	brge	.-6      	; 0x57c <I2C_Start+0xa>
	return (TW_STATUS==0x08); // return 1 if found; 0 otherwise
 582:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 586:	98 7f       	andi	r25, 0xF8	; 248
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	98 30       	cpi	r25, 0x08	; 8
 58c:	09 f0       	breq	.+2      	; 0x590 <I2C_Start+0x1e>
 58e:	80 e0       	ldi	r24, 0x00	; 0
}
 590:	08 95       	ret

00000592 <I2C_SendAddr>:

byte I2C_SendAddr(addr)
// send bus address of slave
{
	TWDR = addr; // load device's bus address
 592:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = TW_SEND; // and send it
 596:	84 e8       	ldi	r24, 0x84	; 132
 598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY); // wait
 59c:	ec eb       	ldi	r30, 0xBC	; 188
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	88 23       	and	r24, r24
 5a4:	ec f7       	brge	.-6      	; 0x5a0 <I2C_SendAddr+0xe>
	return (TW_STATUS==0x18); // return 1 if found; 0 otherwise
 5a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5aa:	98 7f       	andi	r25, 0xF8	; 248
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	98 31       	cpi	r25, 0x18	; 24
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <I2C_SendAddr+0x22>
 5b2:	80 e0       	ldi	r24, 0x00	; 0
}
 5b4:	08 95       	ret

000005b6 <I2C_Write>:

byte I2C_Write (byte data) // sends a data byte to slave
{
	TWDR = data; // load data to be sent
 5b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = TW_SEND; // and send it
 5ba:	84 e8       	ldi	r24, 0x84	; 132
 5bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY); // wait
 5c0:	ec eb       	ldi	r30, 0xBC	; 188
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	88 23       	and	r24, r24
 5c8:	ec f7       	brge	.-6      	; 0x5c4 <I2C_Write+0xe>
	return (TW_STATUS!=0x28); // return 1 if found; 0 otherwise
 5ca:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5ce:	98 7f       	andi	r25, 0xF8	; 248
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	98 32       	cpi	r25, 0x28	; 40
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <I2C_Write+0x22>
 5d6:	80 e0       	ldi	r24, 0x00	; 0
}
 5d8:	08 95       	ret

000005da <I2C_ReadNACK>:

byte I2C_ReadNACK () // reads a data byte from slave
{
	TWCR = TW_NACK; // nack = not reading more data
 5da:	84 e8       	ldi	r24, 0x84	; 132
 5dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY); // wait
 5e0:	ec eb       	ldi	r30, 0xBC	; 188
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	88 23       	and	r24, r24
 5e8:	ec f7       	brge	.-6      	; 0x5e4 <I2C_ReadNACK+0xa>
	return TWDR;
 5ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 5ee:	08 95       	ret

000005f0 <I2C_ReadACK>:

byte I2C_ReadACK () // reads a data byte from slave
{
	TWCR = TW_ACK; // ack = will read more data
 5f0:	84 ec       	ldi	r24, 0xC4	; 196
 5f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY); // wait
 5f6:	ec eb       	ldi	r30, 0xBC	; 188
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	88 23       	and	r24, r24
 5fe:	ec f7       	brge	.-6      	; 0x5fa <I2C_ReadACK+0xa>
	return TWDR;
 600:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	//return (TW_STATUS!=0x28);
}
 604:	08 95       	ret

00000606 <main>:


int main(void){
 606:	af 92       	push	r10
 608:	bf 92       	push	r11
 60a:	cf 92       	push	r12
 60c:	df 92       	push	r13
 60e:	ff 92       	push	r15
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
	SetupPorts(); // use PortB for LCD interface
 618:	47 de       	rcall	.-882    	; 0x2a8 <SetupPorts>
	OpenSPI(); // start communication to TFT
 61a:	5c de       	rcall	.-840    	; 0x2d4 <OpenSPI>
	InitDisplay(); // initialize TFT controller
 61c:	7c de       	rcall	.-776    	; 0x316 <InitDisplay>
 61e:	a9 de       	rcall	.-686    	; 0x372 <ClearScreen>
	ClearScreen();
 620:	8e e0       	ldi	r24, 0x0E	; 14
	SetOrientation(270);
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	e1 de       	rcall	.-574    	; 0x3e8 <SetOrientation>
	WriteInt(register_value);
	*/
	DDRC = 0x00;
	int data = 0;
	
	I2C_Init();
 626:	17 b8       	out	0x07, r1	; 7
	I2C_Start();
 628:	9e df       	rcall	.-196    	; 0x566 <I2C_Init>
 62a:	a3 df       	rcall	.-186    	; 0x572 <I2C_Start>
	I2C_SendAddr(0x5C);
 62c:	8c e5       	ldi	r24, 0x5C	; 92
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	b0 df       	rcall	.-160    	; 0x592 <I2C_SendAddr>
 632:	80 e0       	ldi	r24, 0x00	; 0
	//I2C_Write (0x03);
	I2C_Write (0x00);
 634:	c0 df       	rcall	.-128    	; 0x5b6 <I2C_Write>
 636:	0c eb       	ldi	r16, 0xBC	; 188
 638:	10 e0       	ldi	r17, 0x00	; 0
	I2C_Stop(); 
 63a:	0f 2e       	mov	r0, r31
 63c:	f4 e9       	ldi	r31, 0x94	; 148
 63e:	ff 2e       	mov	r15, r31
 640:	f0 2d       	mov	r31, r0
 642:	f8 01       	movw	r30, r16
 644:	f0 82       	st	Z, r15
 646:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 648:	99 e0       	ldi	r25, 0x09	; 9
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <main+0x44>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <main+0x4a>
	_delay_ms(10);
	
	I2C_Start();
 650:	00 00       	nop
 652:	8f df       	rcall	.-226    	; 0x572 <I2C_Start>
	I2C_SendAddr(0x5C);
 654:	8c e5       	ldi	r24, 0x5C	; 92
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	9c df       	rcall	.-200    	; 0x592 <I2C_SendAddr>
 65a:	83 e0       	ldi	r24, 0x03	; 3
	I2C_Write (0x03);
 65c:	ac df       	rcall	.-168    	; 0x5b6 <I2C_Write>
 65e:	80 e0       	ldi	r24, 0x00	; 0
	I2C_Write (0x00);
 660:	aa df       	rcall	.-172    	; 0x5b6 <I2C_Write>
 662:	f8 01       	movw	r30, r16
	//I2C_Write (2);
	I2C_Stop();
 664:	f0 82       	st	Z, r15
 666:	83 ef       	ldi	r24, 0xF3	; 243
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <main+0x64>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <main+0x6a>
 670:	00 00       	nop
 672:	7f df       	rcall	.-258    	; 0x572 <I2C_Start>
	_delay_ms(2);
	
	I2C_Start();
 674:	8d e5       	ldi	r24, 0x5D	; 93
 676:	90 e0       	ldi	r25, 0x00	; 0
	I2C_SendAddr(0x5C+READ);
 678:	8c df       	rcall	.-232    	; 0x592 <I2C_SendAddr>
 67a:	0f 2e       	mov	r0, r31
 67c:	fa e0       	ldi	r31, 0x0A	; 10
 67e:	af 2e       	mov	r10, r31

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
 680:	b1 2c       	mov	r11, r1
 682:	f0 2d       	mov	r31, r0
 684:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_end+0x1>
 688:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_end>
 68c:	0f 2e       	mov	r0, r31
 curY = y;
 68e:	fc e0       	ldi	r31, 0x0C	; 12
 690:	cf 2e       	mov	r12, r31
 692:	d1 2c       	mov	r13, r1
 694:	f0 2d       	mov	r31, r0
 696:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <curY+0x1>
 69a:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <curY>
	GotoXY(10,12);
	WriteInt(8);
 69e:	88 e0       	ldi	r24, 0x08	; 8
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	44 df       	rcall	.-376    	; 0x52c <WriteInt>
 6a4:	a5 df       	rcall	.-182    	; 0x5f0 <I2C_ReadACK>
	data = I2C_ReadACK();
 6a6:	c8 2f       	mov	r28, r24
 6a8:	d0 e0       	ldi	r29, 0x00	; 0
 6aa:	97 df       	rcall	.-210    	; 0x5da <I2C_ReadNACK>
	data = data + I2C_ReadNACK();
 6ac:	f8 01       	movw	r30, r16
 6ae:	f0 82       	st	Z, r15
	I2C_Stop();
 6b0:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_end+0x1>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
 6b4:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_end>
 6b8:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <curY+0x1>
 curY = y;
 6bc:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <curY>
 6c0:	9e 01       	movw	r18, r28
 6c2:	28 0f       	add	r18, r24
	
	GotoXY(10,12);
	WriteInt(data);
 6c4:	31 1d       	adc	r19, r1
 6c6:	c9 01       	movw	r24, r18
 6c8:	31 df       	rcall	.-414    	; 0x52c <WriteInt>
 6ca:	3f ef       	ldi	r19, 0xFF	; 255
 6cc:	84 e3       	ldi	r24, 0x34	; 52
 6ce:	9c e0       	ldi	r25, 0x0C	; 12
 6d0:	31 50       	subi	r19, 0x01	; 1
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	90 40       	sbci	r25, 0x00	; 0
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0xca>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0xd4>
 6da:	00 00       	nop
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	df 91       	pop	r29
	
	_delay_ms(4000);
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	0f 91       	pop	r16
 6e8:	ff 90       	pop	r15
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	bf 90       	pop	r11
 6f0:	af 90       	pop	r10
 6f2:	08 95       	ret

000006f4 <__itoa_ncheck>:
 6f4:	bb 27       	eor	r27, r27
 6f6:	4a 30       	cpi	r20, 0x0A	; 10
 6f8:	31 f4       	brne	.+12     	; 0x706 <__itoa_ncheck+0x12>
 6fa:	99 23       	and	r25, r25
 6fc:	22 f4       	brpl	.+8      	; 0x706 <__itoa_ncheck+0x12>
 6fe:	bd e2       	ldi	r27, 0x2D	; 45
 700:	90 95       	com	r25
 702:	81 95       	neg	r24
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	01 c0       	rjmp	.+2      	; 0x70a <__utoa_common>

00000708 <__utoa_ncheck>:
 708:	bb 27       	eor	r27, r27

0000070a <__utoa_common>:
 70a:	fb 01       	movw	r30, r22
 70c:	55 27       	eor	r21, r21
 70e:	aa 27       	eor	r26, r26
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	aa 1f       	adc	r26, r26
 716:	a4 17       	cp	r26, r20
 718:	10 f0       	brcs	.+4      	; 0x71e <__utoa_common+0x14>
 71a:	a4 1b       	sub	r26, r20
 71c:	83 95       	inc	r24
 71e:	50 51       	subi	r21, 0x10	; 16
 720:	b9 f7       	brne	.-18     	; 0x710 <__utoa_common+0x6>
 722:	a0 5d       	subi	r26, 0xD0	; 208
 724:	aa 33       	cpi	r26, 0x3A	; 58
 726:	08 f0       	brcs	.+2      	; 0x72a <__utoa_common+0x20>
 728:	a9 5d       	subi	r26, 0xD9	; 217
 72a:	a1 93       	st	Z+, r26
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	79 f7       	brne	.-34     	; 0x70e <__utoa_common+0x4>
 730:	b1 11       	cpse	r27, r1
 732:	b1 93       	st	Z+, r27
 734:	11 92       	st	Z+, r1
 736:	cb 01       	movw	r24, r22
 738:	00 c0       	rjmp	.+0      	; 0x73a <strrev>

0000073a <strrev>:
 73a:	dc 01       	movw	r26, r24
 73c:	fc 01       	movw	r30, r24
 73e:	67 2f       	mov	r22, r23
 740:	71 91       	ld	r23, Z+
 742:	77 23       	and	r23, r23
 744:	e1 f7       	brne	.-8      	; 0x73e <strrev+0x4>
 746:	32 97       	sbiw	r30, 0x02	; 2
 748:	04 c0       	rjmp	.+8      	; 0x752 <strrev+0x18>
 74a:	7c 91       	ld	r23, X
 74c:	6d 93       	st	X+, r22
 74e:	70 83       	st	Z, r23
 750:	62 91       	ld	r22, -Z
 752:	ae 17       	cp	r26, r30
 754:	bf 07       	cpc	r27, r31
 756:	c8 f3       	brcs	.-14     	; 0x74a <strrev+0x10>
 758:	08 95       	ret

0000075a <_exit>:
 75a:	f8 94       	cli

0000075c <__stop_program>:
 75c:	ff cf       	rjmp	.-2      	; 0x75c <__stop_program>
