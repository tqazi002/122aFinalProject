
TestSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  000010e8  0000117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  008001fc  008001fc  00001278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000329c  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc0  00000000  00000000  0000474c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001223  00000000  00000000  0000530c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000864  00000000  00000000  00006530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085f  00000000  00000000  00006d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033d1  00000000  00000000  000075f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000a9c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
       2:	00 00       	nop
       4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	3e c1       	rjmp	.+636    	; 0x2a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
      66:	00 00       	nop
      68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
	...

0000008c <FONT_CHARS>:
      8c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      9c:	7f 14 7f 14 12 2a 7f 2a 24 62 64 08 13 23 50 22     .....*.*$bd..#P"
      ac:	55 49 36 00 05 03 00 00 00 41 22 1c 00 00 1c 22     UI6......A"...."
      bc:	41 00 08 2a 1c 2a 08 08 08 3e 08 08 00 00 30 50     A..*.*...>....0P
      cc:	00 08 08 08 08 08 00 60 60 00 00 02 04 08 10 20     .......``...... 
      dc:	3e 45 49 51 3e 00 40 7f 42 00 46 49 51 61 42 31     >EIQ>.@.B.FIQaB1
      ec:	4b 45 41 21 10 7f 12 14 18 39 45 45 45 27 30 49     KEA!.....9EEE'0I
      fc:	49 4a 3c 03 05 09 71 01 36 49 49 49 36 1e 29 49     IJ<...q.6III6.)I
     10c:	49 06 00 36 36 00 00 00 00 36 56 00 41 22 14 08     I..66....6V.A"..
     11c:	00 14 14 14 14 14 00 08 14 22 41 06 09 51 01 02     ........."A..Q..
     12c:	3e 41 79 49 32 7e 11 11 11 7e 36 49 49 49 7f 22     >AyI2~...~6III."
     13c:	41 41 41 3e 1c 22 41 41 7f 41 49 49 49 7f 01 01     AAA>."AA.AIII...
     14c:	09 09 7f 32 51 41 41 3e 7f 08 08 08 7f 00 41 7f     ...2QAA>......A.
     15c:	41 00 01 3f 41 40 20 41 22 14 08 7f 40 40 40 40     A..?A@ A"...@@@@
     16c:	7f 7f 02 04 02 7f 7f 10 08 04 7f 3e 41 41 41 3e     ...........>AAA>
     17c:	06 09 09 09 7f 5e 21 51 41 3e 46 29 19 09 7f 31     .....^!QA>F)...1
     18c:	49 49 49 46 01 01 7f 01 01 3f 40 40 40 3f 1f 20     IIIF.....?@@@?. 
     19c:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     1ac:	04 03 43 45 49 51 61 41 41 7f 00 00 20 10 08 04     ..CEIQaAA... ...
     1bc:	02 00 00 7f 41 41 04 02 01 02 04 40 40 40 40 40     ....AA.....@@@@@
     1cc:	00 04 02 01 00 78 54 54 54 20 38 44 44 48 7f 20     .....xTTT 8DDH. 
     1dc:	44 44 44 38 7f 44 44 48 38 18 54 54 54 38 02 01     DDD8.DDH8.TTT8..
     1ec:	09 7e 08 3c 54 54 14 08 78 04 04 08 7f 00 40 7d     .~.<TT..x.....@}
     1fc:	44 00 00 3d 44 40 20 44 28 10 7f 00 00 40 7f 41     D..=D@ D(....@.A
     20c:	00 78 04 18 04 7c 78 04 04 08 7c 38 44 44 44 38     .x...|x...|8DDD8
     21c:	08 14 14 14 7c 7c 18 14 14 08 08 04 04 08 7c 20     ....||........| 
     22c:	54 54 54 48 20 40 44 3f 04 7c 20 40 40 3c 1c 20     TTTH @D?.| @@<. 
     23c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 3c 50 50     @ .<@0@<D(.(D<PP
     24c:	50 0c 44 4c 54 64 44 00 41 36 08 00 00 00 7f 00     P.DLTdD.A6......
     25c:	00 00 08 36 41 00 08 1c 2a 08 08 08 08 2a 1c 08     ...6A...*....*..

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d0 e4       	ldi	r29, 0x40	; 64
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	e8 ee       	ldi	r30, 0xE8	; 232
     280:	f0 e1       	ldi	r31, 0x10	; 16
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	ac 3f       	cpi	r26, 0xFC	; 252
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	22 e0       	ldi	r18, 0x02	; 2
     294:	ac ef       	ldi	r26, 0xFC	; 252
     296:	b1 e0       	ldi	r27, 0x01	; 1
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a3 31       	cpi	r26, 0x13	; 19
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	da d4       	rcall	.+2484   	; 0xc58 <main>
     2a4:	1f c7       	rjmp	.+3646   	; 0x10e4 <_exit>

000002a6 <__bad_interrupt>:
     2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <SetupPorts>:
 int y= i / 40;
 char ascii = (i % 96)+32;
 PutCh(ascii,x*6,y*8,CYAN);
 }
 msDelay(2000);
}
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	84 b9       	out	0x04, r24	; 4
     2ac:	17 b8       	out	0x07, r1	; 7
     2ae:	28 9a       	sbi	0x05, 0	; 5
     2b0:	08 95       	ret

000002b2 <msDelay>:
     2b2:	18 16       	cp	r1, r24
     2b4:	19 06       	cpc	r1, r25
     2b6:	6c f4       	brge	.+26     	; 0x2d2 <msDelay+0x20>
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	ef e9       	ldi	r30, 0x9F	; 159
     2be:	ff e0       	ldi	r31, 0x0F	; 15
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <msDelay+0xe>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <msDelay+0x14>
     2c6:	00 00       	nop
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	82 17       	cp	r24, r18
     2ce:	93 07       	cpc	r25, r19
     2d0:	a9 f7       	brne	.-22     	; 0x2bc <msDelay+0xa>
     2d2:	08 95       	ret

000002d4 <OpenSPI>:
     2d4:	80 e5       	ldi	r24, 0x50	; 80
     2d6:	8c bd       	out	0x2c, r24	; 44
     2d8:	8d b5       	in	r24, 0x2d	; 45
     2da:	81 60       	ori	r24, 0x01	; 1
     2dc:	8d bd       	out	0x2d, r24	; 45
     2de:	08 95       	ret

000002e0 <Xfer>:
     2e0:	8e bd       	out	0x2e, r24	; 46
     2e2:	0d b4       	in	r0, 0x2d	; 45
     2e4:	07 fe       	sbrs	r0, 7
     2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <Xfer+0x2>
     2e8:	8e b5       	in	r24, 0x2e	; 46
     2ea:	08 95       	ret

000002ec <WriteCmd>:
     2ec:	29 98       	cbi	0x05, 1	; 5
     2ee:	f8 df       	rcall	.-16     	; 0x2e0 <Xfer>
     2f0:	29 9a       	sbi	0x05, 1	; 5
     2f2:	08 95       	ret

000002f4 <WriteWord>:
     2f4:	cf 93       	push	r28
     2f6:	c8 2f       	mov	r28, r24
     2f8:	89 2f       	mov	r24, r25
     2fa:	f2 df       	rcall	.-28     	; 0x2e0 <Xfer>
     2fc:	8c 2f       	mov	r24, r28
     2fe:	f0 df       	rcall	.-32     	; 0x2e0 <Xfer>
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <HardwareReset>:
     304:	28 98       	cbi	0x05, 0	; 5
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	d3 df       	rcall	.-90     	; 0x2b2 <msDelay>
     30c:	28 9a       	sbi	0x05, 0	; 5
     30e:	86 e9       	ldi	r24, 0x96	; 150
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	cf cf       	rjmp	.-98     	; 0x2b2 <msDelay>
     314:	08 95       	ret

00000316 <InitDisplay>:
     316:	f6 df       	rcall	.-20     	; 0x304 <HardwareReset>
     318:	81 e1       	ldi	r24, 0x11	; 17
     31a:	e8 df       	rcall	.-48     	; 0x2ec <WriteCmd>
     31c:	86 e9       	ldi	r24, 0x96	; 150
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	c8 df       	rcall	.-112    	; 0x2b2 <msDelay>
     322:	8a e3       	ldi	r24, 0x3A	; 58
     324:	e3 df       	rcall	.-58     	; 0x2ec <WriteCmd>
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	db df       	rcall	.-74     	; 0x2e0 <Xfer>
     32a:	89 e2       	ldi	r24, 0x29	; 41
     32c:	df cf       	rjmp	.-66     	; 0x2ec <WriteCmd>
     32e:	08 95       	ret

00000330 <SetAddrWindow>:
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	6c 01       	movw	r12, r24
     342:	8b 01       	movw	r16, r22
     344:	7a 01       	movw	r14, r20
     346:	e9 01       	movw	r28, r18
     348:	8a e2       	ldi	r24, 0x2A	; 42
     34a:	d0 df       	rcall	.-96     	; 0x2ec <WriteCmd>
     34c:	c6 01       	movw	r24, r12
     34e:	d2 df       	rcall	.-92     	; 0x2f4 <WriteWord>
     350:	c7 01       	movw	r24, r14
     352:	d0 df       	rcall	.-96     	; 0x2f4 <WriteWord>
     354:	8b e2       	ldi	r24, 0x2B	; 43
     356:	ca df       	rcall	.-108    	; 0x2ec <WriteCmd>
     358:	c8 01       	movw	r24, r16
     35a:	cc df       	rcall	.-104    	; 0x2f4 <WriteWord>
     35c:	ce 01       	movw	r24, r28
     35e:	ca df       	rcall	.-108    	; 0x2f4 <WriteWord>
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	08 95       	ret

00000372 <ClearScreen>:
     372:	2f e3       	ldi	r18, 0x3F	; 63
     374:	31 e0       	ldi	r19, 0x01	; 1
     376:	4f ee       	ldi	r20, 0xEF	; 239
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	d6 df       	rcall	.-84     	; 0x330 <SetAddrWindow>
     384:	8c e2       	ldi	r24, 0x2C	; 44
     386:	b2 df       	rcall	.-156    	; 0x2ec <WriteCmd>
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	98 e5       	ldi	r25, 0x58	; 88
     38c:	a2 e0       	ldi	r26, 0x02	; 2
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	1e bc       	out	0x2e, r1	; 46
     392:	0d b4       	in	r0, 0x2d	; 45
     394:	07 fe       	sbrs	r0, 7
     396:	fd cf       	rjmp	.-6      	; 0x392 <ClearScreen+0x20>
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	a1 09       	sbc	r26, r1
     39c:	b1 09       	sbc	r27, r1
     39e:	c1 f7       	brne	.-16     	; 0x390 <ClearScreen+0x1e>
     3a0:	08 95       	ret

000003a2 <AdvanceCursor>:
     3a2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <curX>
     3a6:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <curX+0x1>
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     3b0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
     3b4:	88 97       	sbiw	r24, 0x28	; 40
     3b6:	6c f0       	brlt	.+26     	; 0x3d2 <AdvanceCursor+0x30>
     3b8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <curY>
     3bc:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <curY+0x1>
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     3c6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
     3ca:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <curX+0x1>
     3ce:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <curX>
     3d2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <curY>
     3d6:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <curY+0x1>
     3da:	88 97       	sbiw	r24, 0x28	; 40
     3dc:	24 f0       	brlt	.+8      	; 0x3e6 <AdvanceCursor+0x44>
     3de:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <curY+0x1>
     3e2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <curY>
     3e6:	08 95       	ret

000003e8 <SetOrientation>:
     3e8:	cf 93       	push	r28
     3ea:	84 3b       	cpi	r24, 0xB4	; 180
     3ec:	91 05       	cpc	r25, r1
     3ee:	41 f0       	breq	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f0:	8e 30       	cpi	r24, 0x0E	; 14
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	92 07       	cpc	r25, r18
     3f6:	31 f0       	breq	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f8:	8a 35       	cpi	r24, 0x5A	; 90
     3fa:	91 05       	cpc	r25, r1
     3fc:	29 f4       	brne	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     400:	c0 ec       	ldi	r28, 0xC0	; 192
     402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     404:	c0 ea       	ldi	r28, 0xA0	; 160
     406:	03 c0       	rjmp	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     408:	c0 e0       	ldi	r28, 0x00	; 0
     40a:	01 c0       	rjmp	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	c0 e6       	ldi	r28, 0x60	; 96
     40e:	86 e3       	ldi	r24, 0x36	; 54
     410:	6d df       	rcall	.-294    	; 0x2ec <WriteCmd>
     412:	8c 2f       	mov	r24, r28
     414:	65 df       	rcall	.-310    	; 0x2e0 <Xfer>
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <PutCh>:
     41a:	8f 92       	push	r8
     41c:	9f 92       	push	r9
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	e8 2e       	mov	r14, r24
     434:	cb 01       	movw	r24, r22
     436:	ba 01       	movw	r22, r20
     438:	a2 2e       	mov	r10, r18
     43a:	b3 2e       	mov	r11, r19
     43c:	9a 01       	movw	r18, r20
     43e:	2a 5f       	subi	r18, 0xFA	; 250
     440:	3f 4f       	sbci	r19, 0xFF	; 255
     442:	ac 01       	movw	r20, r24
     444:	4c 5f       	subi	r20, 0xFC	; 252
     446:	5f 4f       	sbci	r21, 0xFF	; 255
     448:	73 df       	rcall	.-282    	; 0x330 <SetAddrWindow>
     44a:	8c e2       	ldi	r24, 0x2C	; 44
     44c:	4f df       	rcall	.-354    	; 0x2ec <WriteCmd>
     44e:	8e 2d       	mov	r24, r14
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	7c 01       	movw	r14, r24
     454:	ee 0c       	add	r14, r14
     456:	ff 1c       	adc	r15, r15
     458:	ee 0c       	add	r14, r14
     45a:	ff 1c       	adc	r15, r15
     45c:	e8 0e       	add	r14, r24
     45e:	f9 1e       	adc	r15, r25
     460:	0f 2e       	mov	r0, r31
     462:	f7 e0       	ldi	r31, 0x07	; 7
     464:	cf 2e       	mov	r12, r31
     466:	d1 2c       	mov	r13, r1
     468:	f0 2d       	mov	r31, r0
     46a:	01 e0       	ldi	r16, 0x01	; 1
     46c:	10 e0       	ldi	r17, 0x00	; 0
     46e:	80 ea       	ldi	r24, 0xA0	; 160
     470:	e8 1a       	sub	r14, r24
     472:	f1 08       	sbc	r15, r1
     474:	81 2c       	mov	r8, r1
     476:	91 2c       	mov	r9, r1
     478:	1b c0       	rjmp	.+54     	; 0x4b0 <PutCh+0x96>
     47a:	f7 01       	movw	r30, r14
     47c:	ec 0f       	add	r30, r28
     47e:	fd 1f       	adc	r31, r29
     480:	e4 57       	subi	r30, 0x74	; 116
     482:	ff 4f       	sbci	r31, 0xFF	; 255
     484:	e4 91       	lpm	r30, Z
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	e0 23       	and	r30, r16
     48a:	f1 23       	and	r31, r17
     48c:	ef 2b       	or	r30, r31
     48e:	19 f0       	breq	.+6      	; 0x496 <PutCh+0x7c>
     490:	8a 2d       	mov	r24, r10
     492:	9b 2d       	mov	r25, r11
     494:	02 c0       	rjmp	.+4      	; 0x49a <PutCh+0x80>
     496:	88 2d       	mov	r24, r8
     498:	99 2d       	mov	r25, r9
     49a:	2c df       	rcall	.-424    	; 0x2f4 <WriteWord>
     49c:	21 96       	adiw	r28, 0x01	; 1
     49e:	c5 30       	cpi	r28, 0x05	; 5
     4a0:	d1 05       	cpc	r29, r1
     4a2:	59 f7       	brne	.-42     	; 0x47a <PutCh+0x60>
     4a4:	00 0f       	add	r16, r16
     4a6:	11 1f       	adc	r17, r17
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	c8 1a       	sub	r12, r24
     4ac:	d1 08       	sbc	r13, r1
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <PutCh+0x9c>
     4b0:	c0 e0       	ldi	r28, 0x00	; 0
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
     4b4:	e2 cf       	rjmp	.-60     	; 0x47a <PutCh+0x60>
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	9f 90       	pop	r9
     4cc:	8f 90       	pop	r8
     4ce:	08 95       	ret

000004d0 <WriteChar>:
     4d0:	9b 01       	movw	r18, r22
     4d2:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <curY>
     4d6:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <curY+0x1>
     4da:	44 0f       	add	r20, r20
     4dc:	55 1f       	adc	r21, r21
     4de:	44 0f       	add	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	44 0f       	add	r20, r20
     4e4:	55 1f       	adc	r21, r21
     4e6:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <curX>
     4ea:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <curX+0x1>
     4ee:	bf 01       	movw	r22, r30
     4f0:	66 0f       	add	r22, r22
     4f2:	77 1f       	adc	r23, r23
     4f4:	e6 0f       	add	r30, r22
     4f6:	f7 1f       	adc	r31, r23
     4f8:	bf 01       	movw	r22, r30
     4fa:	66 0f       	add	r22, r22
     4fc:	77 1f       	adc	r23, r23
     4fe:	8d df       	rcall	.-230    	; 0x41a <PutCh>
     500:	50 cf       	rjmp	.-352    	; 0x3a2 <AdvanceCursor>
     502:	08 95       	ret

00000504 <WriteString>:
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	ec 01       	movw	r28, r24
     50e:	88 81       	ld	r24, Y
     510:	88 23       	and	r24, r24
     512:	39 f0       	breq	.+14     	; 0x522 <WriteString+0x1e>
     514:	8b 01       	movw	r16, r22
     516:	21 96       	adiw	r28, 0x01	; 1
     518:	b8 01       	movw	r22, r16
     51a:	da df       	rcall	.-76     	; 0x4d0 <WriteChar>
     51c:	89 91       	ld	r24, Y+
     51e:	81 11       	cpse	r24, r1
     520:	fb cf       	rjmp	.-10     	; 0x518 <WriteString+0x14>
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <WriteInt>:
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	28 97       	sbiw	r28, 0x08	; 8
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	4a e0       	ldi	r20, 0x0A	; 10
     542:	be 01       	movw	r22, r28
     544:	6f 5f       	subi	r22, 0xFF	; 255
     546:	7f 4f       	sbci	r23, 0xFF	; 255
     548:	9a d5       	rcall	.+2868   	; 0x107e <__itoa_ncheck>
     54a:	6f ef       	ldi	r22, 0xFF	; 255
     54c:	7f ef       	ldi	r23, 0xFF	; 255
     54e:	ce 01       	movw	r24, r28
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	d8 df       	rcall	.-80     	; 0x504 <WriteString>
     554:	28 96       	adiw	r28, 0x08	; 8
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <ADC_init>:
#include <avr/io.h>
#include "SPI_LCD.c"

// ADC init
void ADC_init() {
	ADMUX = (1<<REFS0);
     566:	80 e4       	ldi	r24, 0x40	; 64
     568:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     56c:	87 e8       	ldi	r24, 0x87	; 135
     56e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     572:	08 95       	ret

00000574 <ReadADC>:

// Read ADC from different ports
uint16_t ReadADC(uint8_t data)
{
	data &= 0x07;
	ADMUX = (ADMUX & 0xF8) | data;
     574:	ec e7       	ldi	r30, 0x7C	; 124
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	90 81       	ld	r25, Z
     57a:	98 7f       	andi	r25, 0xF8	; 248
     57c:	87 70       	andi	r24, 0x07	; 7
     57e:	89 2b       	or	r24, r25
     580:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);
     582:	ea e7       	ldi	r30, 0x7A	; 122
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	80 64       	ori	r24, 0x40	; 64
     58a:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));
     58c:	80 81       	ld	r24, Z
     58e:	86 fd       	sbrc	r24, 6
     590:	fd cf       	rjmp	.-6      	; 0x58c <ReadADC+0x18>

	ADCSRA |= (1<<ADIF);
     592:	ea e7       	ldi	r30, 0x7A	; 122
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	80 61       	ori	r24, 0x10	; 16
     59a:	80 83       	st	Z, r24
	return (ADC);
     59c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     5a0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     5a4:	08 95       	ret

000005a6 <Tick>:
int press = 0;

// Temperature
enum States { Init, Read} State;
void Tick() {
	switch (State) {
     5a6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <State>
     5aa:	88 23       	and	r24, r24
     5ac:	19 f0       	breq	.+6      	; 0x5b4 <Tick+0xe>
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	29 f0       	breq	.+10     	; 0x5bc <Tick+0x16>
     5b2:	08 95       	ret
		case Init:
		State = Read;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <State>
		break;
     5ba:	08 95       	ret
		
		case Read:
		readAD = ReadADC(4) / 136.4;/// 2.2;
     5bc:	84 e0       	ldi	r24, 0x04	; 4
     5be:	da df       	rcall	.-76     	; 0x574 <ReadADC>
     5c0:	bc 01       	movw	r22, r24
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	5b d4       	rcall	.+2230   	; 0xe7e <__floatunsisf>
     5c8:	26 e6       	ldi	r18, 0x66	; 102
     5ca:	36 e6       	ldi	r19, 0x66	; 102
     5cc:	48 e0       	ldi	r20, 0x08	; 8
     5ce:	53 e4       	ldi	r21, 0x43	; 67
     5d0:	c2 d3       	rcall	.+1924   	; 0xd56 <__divsf3>
     5d2:	29 d4       	rcall	.+2130   	; 0xe26 <__fixunssfsi>
     5d4:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <readAD+0x1>
     5d8:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <readAD>
		//_delay_ms(20);
		State = Read;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <State>
     5e2:	08 95       	ret

000005e4 <Tick4>:

// Humidity
enum States4 { Init4, Read4} State4;
	unsigned short readAD4 = 0x0000;
void Tick4() {
	switch (State4) {
     5e4:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <State4>
     5e8:	88 23       	and	r24, r24
     5ea:	19 f0       	breq	.+6      	; 0x5f2 <Tick4+0xe>
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	29 f0       	breq	.+10     	; 0x5fa <Tick4+0x16>
     5f0:	08 95       	ret
		case Init4:
		State4 = Read4;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <State4>
		break;
     5f8:	08 95       	ret
		
		case Read4:
		readAD4 = ReadADC(6) / 753.5;//* 0.086;
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	bb df       	rcall	.-138    	; 0x574 <ReadADC>
     5fe:	bc 01       	movw	r22, r24
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	3c d4       	rcall	.+2168   	; 0xe7e <__floatunsisf>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e6       	ldi	r19, 0x60	; 96
     60a:	4c e3       	ldi	r20, 0x3C	; 60
     60c:	54 e4       	ldi	r21, 0x44	; 68
     60e:	a3 d3       	rcall	.+1862   	; 0xd56 <__divsf3>
     610:	0a d4       	rcall	.+2068   	; 0xe26 <__fixunssfsi>
     612:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <readAD4+0x1>
     616:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <readAD4>
		State4 = Read4;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <State4>
     620:	08 95       	ret

00000622 <Tick1>:
}

//Light
enum States1 { Init1, Read1 } State1;
void Tick1() {
	switch (State1) {
     622:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <State1>
     626:	88 23       	and	r24, r24
     628:	19 f0       	breq	.+6      	; 0x630 <Tick1+0xe>
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	29 f0       	breq	.+10     	; 0x638 <Tick1+0x16>
     62e:	08 95       	ret
		case Init1:
		State1 = Read1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <State1>
		break;
     636:	08 95       	ret
		
		case Read1:
		readADC1 = ReadADC(5) / 61.2;
     638:	85 e0       	ldi	r24, 0x05	; 5
     63a:	9c df       	rcall	.-200    	; 0x574 <ReadADC>
     63c:	bc 01       	movw	r22, r24
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	1d d4       	rcall	.+2106   	; 0xe7e <__floatunsisf>
     644:	2d ec       	ldi	r18, 0xCD	; 205
     646:	3c ec       	ldi	r19, 0xCC	; 204
     648:	44 e7       	ldi	r20, 0x74	; 116
     64a:	52 e4       	ldi	r21, 0x42	; 66
     64c:	84 d3       	rcall	.+1800   	; 0xd56 <__divsf3>
     64e:	eb d3       	rcall	.+2006   	; 0xe26 <__fixunssfsi>
     650:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <readADC1+0x1>
     654:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <readADC1>
		State1 = Read1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <State1>
     65e:	08 95       	ret

00000660 <Tick2>:
	}
}

// Display and Touch
enum States2 {Normal, Emergency, Em2} State2;
void Tick2() {
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
	switch (State2) {
     664:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <State2>
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	09 f4       	brne	.+2      	; 0x66e <Tick2+0xe>
     66c:	ee c0       	rjmp	.+476    	; 0x84a <Tick2+0x1ea>
     66e:	20 f0       	brcs	.+8      	; 0x678 <Tick2+0x18>
     670:	82 30       	cpi	r24, 0x02	; 2
     672:	09 f4       	brne	.+2      	; 0x676 <Tick2+0x16>
     674:	20 c1       	rjmp	.+576    	; 0x8b6 <Tick2+0x256>
     676:	4f c1       	rjmp	.+670    	; 0x916 <Tick2+0x2b6>
		case Normal:
		if(global_earthquake == 0){
     678:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <global_earthquake>
     67c:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <global_earthquake+0x1>
     680:	89 2b       	or	r24, r25
     682:	09 f0       	breq	.+2      	; 0x686 <Tick2+0x26>
     684:	dd c0       	rjmp	.+442    	; 0x840 <Tick2+0x1e0>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     686:	88 e2       	ldi	r24, 0x28	; 40
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     68e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     692:	c5 e0       	ldi	r28, 0x05	; 5
     694:	d0 e0       	ldi	r29, 0x00	; 0
     696:	d0 93 0c 02 	sts	0x020C, r29	; 0x80020c <curY+0x1>
     69a:	c0 93 0b 02 	sts	0x020B, r28	; 0x80020b <curY>
			//Temperature
			GotoXY(40,5);
			WriteInt(readAD);
     69e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <readAD>
     6a2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <readAD+0x1>
     6a6:	42 df       	rcall	.-380    	; 0x52c <WriteInt>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     6a8:	86 e2       	ldi	r24, 0x26	; 38
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     6b0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     6b4:	d0 93 0c 02 	sts	0x020C, r29	; 0x80020c <curY+0x1>
     6b8:	c0 93 0b 02 	sts	0x020B, r28	; 0x80020b <curY>
			char *str = "F"; 
			GotoXY(38,5); // position text cursor
			WriteString(str,GREEN); // display text
     6bc:	60 ee       	ldi	r22, 0xE0	; 224
     6be:	77 e0       	ldi	r23, 0x07	; 7
     6c0:	86 e0       	ldi	r24, 0x06	; 6
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	1f df       	rcall	.-450    	; 0x504 <WriteString>
			
			if(readAD > 83){
     6c6:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <readAD>
     6ca:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <readAD+0x1>
     6ce:	84 35       	cpi	r24, 0x54	; 84
     6d0:	91 05       	cpc	r25, r1
     6d2:	90 f0       	brcs	.+36     	; 0x6f8 <Tick2+0x98>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     6d4:	84 e2       	ldi	r24, 0x24	; 36
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     6dc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     6e0:	85 e0       	ldi	r24, 0x05	; 5
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     6e8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
				char *str1 = "Are you staying hydrated?    "; 
				GotoXY(36,5); // position text cursor
				WriteString(str1,BLUE); // display text
     6ec:	6f e1       	ldi	r22, 0x1F	; 31
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	88 e0       	ldi	r24, 0x08	; 8
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	07 df       	rcall	.-498    	; 0x504 <WriteString>
     6f6:	27 c0       	rjmp	.+78     	; 0x746 <Tick2+0xe6>
			}
			else if((readAD <= 83) && (readAD >= 72)){
     6f8:	88 54       	subi	r24, 0x48	; 72
     6fa:	91 09       	sbc	r25, r1
     6fc:	0c 97       	sbiw	r24, 0x0c	; 12
     6fe:	90 f4       	brcc	.+36     	; 0x724 <Tick2+0xc4>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     700:	84 e2       	ldi	r24, 0x24	; 36
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     708:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     70c:	85 e0       	ldi	r24, 0x05	; 5
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     714:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
				char *str2 = "It's nice outside            "; // text to display
				GotoXY(36,5); // position text cursor
				WriteString(str2,GREEN); // display text
     718:	60 ee       	ldi	r22, 0xE0	; 224
     71a:	77 e0       	ldi	r23, 0x07	; 7
     71c:	86 e2       	ldi	r24, 0x26	; 38
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	f1 de       	rcall	.-542    	; 0x504 <WriteString>
     722:	11 c0       	rjmp	.+34     	; 0x746 <Tick2+0xe6>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     724:	84 e2       	ldi	r24, 0x24	; 36
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     72c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     730:	85 e0       	ldi	r24, 0x05	; 5
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     738:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
			}
			else {
				char *str3 = "Did you wear something warm? "; // text to display
				GotoXY(36,5); // position text cursor
				WriteString(str3,BLUE); // display text
     73c:	6f e1       	ldi	r22, 0x1F	; 31
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	84 e4       	ldi	r24, 0x44	; 68
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	df de       	rcall	.-578    	; 0x504 <WriteString>
			}
			
			//Light
			if (readADC1 >= (MAX / 2)) {
     746:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MAX>
     74a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <MAX+0x1>
     74e:	96 95       	lsr	r25
     750:	87 95       	ror	r24
     752:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <readADC1>
     756:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <readADC1+0x1>
     75a:	28 17       	cp	r18, r24
     75c:	39 07       	cpc	r19, r25
     75e:	90 f0       	brcs	.+36     	; 0x784 <Tick2+0x124>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     760:	88 e2       	ldi	r24, 0x28	; 40
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     768:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     76c:	8d e0       	ldi	r24, 0x0D	; 13
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     774:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
				char *str4 = "Did you wear your sunscreen?"; // text to display
				GotoXY(40,13); // position text cursor
				WriteString(str4,BLUE); // display text
     778:	6f e1       	ldi	r22, 0x1F	; 31
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	82 e6       	ldi	r24, 0x62	; 98
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	c1 de       	rcall	.-638    	; 0x504 <WriteString>
     782:	11 c0       	rjmp	.+34     	; 0x7a6 <Tick2+0x146>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     784:	88 e2       	ldi	r24, 0x28	; 40
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     78c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     790:	8d e0       	ldi	r24, 0x0D	; 13
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     798:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
			}
			else {
				char *str5 = "It's cloudy/dark outside    "; // text to display
				GotoXY(40,13); // position text cursor
				WriteString(str5,GREEN); // display text
     79c:	60 ee       	ldi	r22, 0xE0	; 224
     79e:	77 e0       	ldi	r23, 0x07	; 7
     7a0:	8f e7       	ldi	r24, 0x7F	; 127
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	af de       	rcall	.-674    	; 0x504 <WriteString>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     7a6:	88 e2       	ldi	r24, 0x28	; 40
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     7ae:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     7b2:	c5 e1       	ldi	r28, 0x15	; 21
     7b4:	d0 e0       	ldi	r29, 0x00	; 0
     7b6:	d0 93 0c 02 	sts	0x020C, r29	; 0x80020c <curY+0x1>
     7ba:	c0 93 0b 02 	sts	0x020B, r28	; 0x80020b <curY>
			}
			
			// Humidity
			GotoXY(40,21);
			WriteInt(readAD4);
     7be:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <readAD4>
     7c2:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <readAD4+0x1>
     7c6:	b2 de       	rcall	.-668    	; 0x52c <WriteInt>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     7c8:	86 e2       	ldi	r24, 0x26	; 38
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     7d0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     7d4:	d0 93 0c 02 	sts	0x020C, r29	; 0x80020c <curY+0x1>
     7d8:	c0 93 0b 02 	sts	0x020B, r28	; 0x80020b <curY>
			char *str10 = "%";
			GotoXY(38,21); // position text cursor
			WriteString(str10,GREEN); // display text
     7dc:	60 ee       	ldi	r22, 0xE0	; 224
     7de:	77 e0       	ldi	r23, 0x07	; 7
     7e0:	8c e9       	ldi	r24, 0x9C	; 156
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	8f de       	rcall	.-738    	; 0x504 <WriteString>
			if(readAD4 > 80){
     7e6:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <readAD4>
     7ea:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <readAD4+0x1>
     7ee:	81 35       	cpi	r24, 0x51	; 81
     7f0:	91 05       	cpc	r25, r1
     7f2:	90 f0       	brcs	.+36     	; 0x818 <Tick2+0x1b8>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     7f4:	84 e2       	ldi	r24, 0x24	; 36
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     7fc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     800:	85 e1       	ldi	r24, 0x15	; 21
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     808:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
				char *str11 = "Did you take your umbrella?";
				GotoXY(36,21); // position text cursor
				WriteString(str11,BLUE); // display text
     80c:	6f e1       	ldi	r22, 0x1F	; 31
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	8e e9       	ldi	r24, 0x9E	; 158
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	77 de       	rcall	.-786    	; 0x504 <WriteString>
     816:	11 c0       	rjmp	.+34     	; 0x83a <Tick2+0x1da>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     818:	84 e2       	ldi	r24, 0x24	; 36
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     820:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     824:	85 e1       	ldi	r24, 0x15	; 21
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
			}
			else{
				char *str12 = "No need for umbrella       "; // text to display
				GotoXY(36,21); // position text cursor
				WriteString(str12,GREEN); // display text
     82c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
     830:	60 ee       	ldi	r22, 0xE0	; 224
     832:	77 e0       	ldi	r23, 0x07	; 7
     834:	8a eb       	ldi	r24, 0xBA	; 186
     836:	91 e0       	ldi	r25, 0x01	; 1
			}
			
			// Touch
			//FillCircle (x, y, 10, MAGENTA);
			
			State2 = Normal;
     838:	65 de       	rcall	.-822    	; 0x504 <WriteString>
     83a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <State2>
			WriteString(str8,BLACK); // display text
			char *str9 = " "; // text to display
			GotoXY(40,10); // position text cursor
			WriteString(str9,BLACK); // display text
			*/
			ClearScreen();
     83e:	6d c0       	rjmp	.+218    	; 0x91a <Tick2+0x2ba>
     840:	98 dd       	rcall	.-1232   	; 0x372 <ClearScreen>
			State2 = Emergency;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <State2>
     848:	68 c0       	rjmp	.+208    	; 0x91a <Tick2+0x2ba>
		}
		break;
		
		case Emergency:
		count_secs = count_secs + 1;
     84a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <count_secs>
     84e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <count_secs+0x1>
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <count_secs+0x1>
     858:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <count_secs>
		if(count_secs < 10){
     85c:	0a 97       	sbiw	r24, 0x0a	; 10
     85e:	04 f5       	brge	.+64     	; 0x8a0 <Tick2+0x240>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     860:	84 e2       	ldi	r24, 0x24	; 36
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     868:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     86c:	8c e0       	ldi	r24, 0x0C	; 12
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     874:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
			char *str6 = "EVACUATE BUILDING!"; // text to display
			GotoXY(36,12); // position text cursor
			WriteString(str6,BLUE); // display text
     878:	6f e1       	ldi	r22, 0x1F	; 31
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	86 ed       	ldi	r24, 0xD6	; 214
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	41 de       	rcall	.-894    	; 0x504 <WriteString>
			PORTC = 0xFF;
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	83 ed       	ldi	r24, 0xD3	; 211
     88a:	90 e3       	ldi	r25, 0x30	; 48
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <Tick2+0x22c>
     894:	00 c0       	rjmp	.+0      	; 0x896 <Tick2+0x236>
     896:	00 00       	nop
			_delay_ms(1000);
			State2 = Em2;
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <State2>
     89e:	3d c0       	rjmp	.+122    	; 0x91a <Tick2+0x2ba>
		}
		else{
			global_earthquake = 0;
     8a0:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <global_earthquake+0x1>
     8a4:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <global_earthquake>
			count_secs = 0;
     8a8:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <count_secs+0x1>
     8ac:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <count_secs>
			State2 = Normal;
     8b0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <State2>
     8b4:	32 c0       	rjmp	.+100    	; 0x91a <Tick2+0x2ba>
		}
		break;
		
		case Em2:
		if(count_secs < 10){
     8b6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <count_secs>
     8ba:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <count_secs+0x1>
     8be:	0a 97       	sbiw	r24, 0x0a	; 10
     8c0:	fc f4       	brge	.+62     	; 0x900 <Tick2+0x2a0>

int curX,curY; // current x & y cursor position
void GotoXY (int x,int y)
// position cursor on character x,y grid, where 0<x<20, 0<y<19.
{
 curX = x;
     8c2:	84 e2       	ldi	r24, 0x24	; 36
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <curX+0x1>
     8ca:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <curX>
 curY = y;
     8ce:	8c e0       	ldi	r24, 0x0C	; 12
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <curY+0x1>
     8d6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <curY>
			char *str7 = "                  "; // text to display
			GotoXY(36,12); // position text cursor
			WriteString(str7,BLUE); // display text
     8da:	6f e1       	ldi	r22, 0x1F	; 31
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	89 ee       	ldi	r24, 0xE9	; 233
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	10 de       	rcall	.-992    	; 0x504 <WriteString>
			PORTC = 0x00;
     8e4:	18 b8       	out	0x08, r1	; 8
     8e6:	2f ef       	ldi	r18, 0xFF	; 255
     8e8:	83 ed       	ldi	r24, 0xD3	; 211
     8ea:	90 e3       	ldi	r25, 0x30	; 48
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	80 40       	sbci	r24, 0x00	; 0
     8f0:	90 40       	sbci	r25, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <Tick2+0x28c>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <Tick2+0x296>
     8f6:	00 00       	nop
			_delay_ms(1000);
			State2 = Emergency;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <State2>
     8fe:	0d c0       	rjmp	.+26     	; 0x91a <Tick2+0x2ba>
		}
		else{
			count_secs = 0;
     900:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <count_secs+0x1>
     904:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <count_secs>
			global_earthquake = 0;
     908:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <global_earthquake+0x1>
     90c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <global_earthquake>
			State2 = Normal;
     910:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <State2>
     914:	02 c0       	rjmp	.+4      	; 0x91a <Tick2+0x2ba>
		}
		break;
		
		default:
		State2 = Normal;
     916:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <State2>
		break;
	}
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <Tick3>:


enum States3 { Init3 } State3;
unsigned char vibration = 0x00; 
void Tick3() {
	vibration = ~PIND & 0x01;
     920:	89 b1       	in	r24, 0x09	; 9
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	28 2f       	mov	r18, r24
     926:	21 70       	andi	r18, 0x01	; 1
     928:	80 fd       	sbrc	r24, 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <__data_end>
	switch (State3) {
     930:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <State3>
     934:	81 11       	cpse	r24, r1
     936:	0a c0       	rjmp	.+20     	; 0x94c <Tick3+0x2c>
		case Init3:
		if (vibration) {
     938:	21 11       	cpse	r18, r1
     93a:	06 c0       	rjmp	.+12     	; 0x948 <Tick3+0x28>
			global_earthquake = 1;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <global_earthquake+0x1>
     944:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <global_earthquake>
		}
		State3 = Init3;
     948:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <State3>
     94c:	08 95       	ret

0000094e <readTouchX>:

unsigned int readTouchX(void) {

	unsigned int x_val = 0;

	DDRA &= ~((1<<PINA1) | (1<<PINA2)); //Sets X+ and X- to inputs
     94e:	81 b1       	in	r24, 0x01	; 1
     950:	89 7f       	andi	r24, 0xF9	; 249
     952:	81 b9       	out	0x01, r24	; 1

	PORTA &= ~((1<<PINA1) | (1<<PINA2)); //Sets X+,X- to ground
     954:	82 b1       	in	r24, 0x02	; 2
     956:	89 7f       	andi	r24, 0xF9	; 249
     958:	82 b9       	out	0x02, r24	; 2
	

	DDRA |= (1<<PINA0) | (1<<PINA3); //Sets Y+ and Y- as outputs
     95a:	81 b1       	in	r24, 0x01	; 1
     95c:	89 60       	ori	r24, 0x09	; 9
     95e:	81 b9       	out	0x01, r24	; 1

	PORTA &= ~(1<<PINA3); //Set Y- to ground
     960:	13 98       	cbi	0x02, 3	; 2

	PORTA |= (1<<PINA0); //Sets Y+ high
     962:	10 9a       	sbi	0x02, 0	; 2



	ADCSRA |= (1<<ADEN)|(1<<ADSC) + 7;
     964:	ea e7       	ldi	r30, 0x7A	; 122
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	87 6c       	ori	r24, 0xC7	; 199
     96c:	80 83       	st	Z, r24

	ADMUX = (1<<ADLAR)|((1<<REFS0) + 1); //Read X-
     96e:	81 e6       	ldi	r24, 0x61	; 97
     970:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	8f e1       	ldi	r24, 0x1F	; 31
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <readTouchX+0x2a>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <readTouchX+0x30>
     97e:	00 00       	nop

	//WAIT FOR DONE BIT

	_delay_us(200);

	x_val = ADCL; //Read high first
     980:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	x_val = x_val + (ADCH<<8); //Then read low
     984:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	98 2f       	mov	r25, r24
     98c:	88 27       	eor	r24, r24
     98e:	82 0f       	add	r24, r18
     990:	91 1d       	adc	r25, r1
	
	if(x_val!=0)
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	89 f0       	breq	.+34     	; 0x9b8 <readTouchX+0x6a>
	{
		//convert x_val to 0-480 range
		x_val=(x_val-8000)/150; // 4000/117
     996:	80 54       	subi	r24, 0x40	; 64
     998:	9f 41       	sbci	r25, 0x1F	; 31
     99a:	9c 01       	movw	r18, r24
     99c:	36 95       	lsr	r19
     99e:	27 95       	ror	r18
     9a0:	a5 e7       	ldi	r26, 0x75	; 117
     9a2:	ba ed       	ldi	r27, 0xDA	; 218
     9a4:	5d d3       	rcall	.+1722   	; 0x1060 <__umulhisi3>
     9a6:	00 24       	eor	r0, r0
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	00 1c       	adc	r0, r0
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	00 1c       	adc	r0, r0
     9b4:	89 2f       	mov	r24, r25
     9b6:	90 2d       	mov	r25, r0
	}
	

	return x_val; //Returns raw X position
}
     9b8:	08 95       	ret

000009ba <readTouchY>:

unsigned int readTouchY(void) {

	unsigned int y_val=0;

	DDRA &= ~((1<<PINA0) | (1<<PINA3)); //Set Y+ and Y- to inputs
     9ba:	81 b1       	in	r24, 0x01	; 1
     9bc:	86 7f       	andi	r24, 0xF6	; 246
     9be:	81 b9       	out	0x01, r24	; 1

	PORTA &= ~((1<<PINA0) | (1<<PINA3)); //Set Y+,Y-to ground
     9c0:	82 b1       	in	r24, 0x02	; 2
     9c2:	86 7f       	andi	r24, 0xF6	; 246
     9c4:	82 b9       	out	0x02, r24	; 2
	

	DDRA |= ((1<<PINA1) | (1<<PINA2)); //Set X+ and X- to outputs
     9c6:	81 b1       	in	r24, 0x01	; 1
     9c8:	86 60       	ori	r24, 0x06	; 6
     9ca:	81 b9       	out	0x01, r24	; 1

	PORTA &= ~(1<<PINA1); // Set X- to Ground
     9cc:	11 98       	cbi	0x02, 1	; 2

	PORTA |= (1<<PINA2);	//Set X+ high
     9ce:	12 9a       	sbi	0x02, 2	; 2
	

	ADCSRA = (1<<ADEN) | (1<<ADSC) + 7;
     9d0:	87 ec       	ldi	r24, 0xC7	; 199
     9d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	ADMUX = (1<<ADLAR) | (1<<REFS0);  //Read Y+
     9d6:	80 e6       	ldi	r24, 0x60	; 96
     9d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     9dc:	8f e1       	ldi	r24, 0x1F	; 31
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <readTouchY+0x26>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <readTouchY+0x2c>
     9e6:	00 00       	nop
	//and start a conversion
	// while(ADSC != 0){};

	_delay_us(200); //wait on done bit

	y_val = ADCL;	//Read high first
     9e8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	y_val = y_val + (ADCH<<8); //Then read low
     9ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	98 2f       	mov	r25, r24
     9f4:	88 27       	eor	r24, r24
     9f6:	82 0f       	add	r24, r18
     9f8:	91 1d       	adc	r25, r1
	
	if(y_val!=0)
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	71 f0       	breq	.+28     	; 0xa1a <readTouchY+0x60>
	{
		//convert y_val to 0-320 range
		y_val=(y_val-8000)/180;
     9fe:	9c 01       	movw	r18, r24
     a00:	20 54       	subi	r18, 0x40	; 64
     a02:	3f 41       	sbci	r19, 0x1F	; 31
     a04:	a3 e8       	ldi	r26, 0x83	; 131
     a06:	bd e2       	ldi	r27, 0x2D	; 45
     a08:	2b d3       	rcall	.+1622   	; 0x1060 <__umulhisi3>
     a0a:	96 95       	lsr	r25
     a0c:	87 95       	ror	r24
     a0e:	92 95       	swap	r25
     a10:	82 95       	swap	r24
     a12:	8f 70       	andi	r24, 0x0F	; 15
     a14:	89 27       	eor	r24, r25
     a16:	9f 70       	andi	r25, 0x0F	; 15
     a18:	89 27       	eor	r24, r25

	}
	

	return y_val; //Return raw Y position
}
     a1a:	08 95       	ret

00000a1c <pressureX>:


uint16_t pressureX(void) {
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
	// Set X+ output to ground
	DDRA |= (1<<PINA2);
     a2e:	0a 9a       	sbi	0x01, 2	; 1
	PORTA &= ~(1<<PINA2);
     a30:	12 98       	cbi	0x02, 2	; 2
	
	// Set Y- output to VCC
	DDRA |= (1<<PINA3);
     a32:	0b 9a       	sbi	0x01, 3	; 1
	PORTA |= (1<<PINA3);
     a34:	13 9a       	sbi	0x02, 3	; 2
	
	// Set X- and Y+ as inputs and to ground
	DDRA &= ~((1<<PINA0) | (1<<PINA1));
     a36:	81 b1       	in	r24, 0x01	; 1
     a38:	8c 7f       	andi	r24, 0xFC	; 252
     a3a:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~((1<<PINA0) | (1<<PINA1));
     a3c:	82 b1       	in	r24, 0x02	; 2
     a3e:	8c 7f       	andi	r24, 0xFC	; 252
     a40:	82 b9       	out	0x02, r24	; 2
	
	ADMUX = (1<<REFS0) + 1; //Read the value of X-
     a42:	4c e7       	ldi	r20, 0x7C	; 124
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	81 e4       	ldi	r24, 0x41	; 65
     a48:	da 01       	movw	r26, r20
     a4a:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);
     a4c:	ea e7       	ldi	r30, 0x7A	; 122
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	80 64       	ori	r24, 0x40	; 64
     a54:	80 83       	st	Z, r24
     a56:	cf e1       	ldi	r28, 0x1F	; 31
     a58:	d3 e0       	ldi	r29, 0x03	; 3
     a5a:	21 97       	sbiw	r28, 0x01	; 1
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <pressureX+0x3e>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <pressureX+0x44>
     a60:	00 00       	nop
	_delay_us(200);
	int z1 = ADCL;	//Read the high
     a62:	28 e7       	ldi	r18, 0x78	; 120
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	d9 01       	movw	r26, r18
     a68:	cc 91       	ld	r28, X
     a6a:	ac 2e       	mov	r10, r28
     a6c:	b1 2c       	mov	r11, r1
	z1 = z1 + (ADCH<<8); //Read the low
     a6e:	a9 e7       	ldi	r26, 0x79	; 121
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	1c 91       	ld	r17, X
	ADMUX = (1<<REFS0); //Read the value of Y+
     a74:	80 e4       	ldi	r24, 0x40	; 64
     a76:	ea 01       	movw	r28, r20
     a78:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);
     a7a:	80 81       	ld	r24, Z
     a7c:	80 64       	ori	r24, 0x40	; 64
     a7e:	80 83       	st	Z, r24
     a80:	ef e1       	ldi	r30, 0x1F	; 31
     a82:	f3 e0       	ldi	r31, 0x03	; 3
     a84:	31 97       	sbiw	r30, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <pressureX+0x68>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <pressureX+0x6e>
     a8a:	00 00       	nop
	_delay_us(200);
	int z2 = ADCL; //Read the high
     a8c:	e9 01       	movw	r28, r18
     a8e:	88 81       	ld	r24, Y
	z2 = z2 + (ADCH<<8); //Read the low
     a90:	6c 91       	ld	r22, X

	// now read the x
	float rtouch;
	rtouch = z2;
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	76 2f       	mov	r23, r22
     a96:	66 27       	eor	r22, r22
     a98:	68 0f       	add	r22, r24
     a9a:	71 1d       	adc	r23, r1
     a9c:	07 2e       	mov	r0, r23
     a9e:	00 0c       	add	r0, r0
     aa0:	88 0b       	sbc	r24, r24
     aa2:	99 0b       	sbc	r25, r25
     aa4:	ee d1       	rcall	.+988    	; 0xe82 <__floatsisf>
     aa6:	6b 01       	movw	r12, r22
     aa8:	7c 01       	movw	r14, r24
	rtouch /= z1;
     aaa:	61 2f       	mov	r22, r17
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	76 2f       	mov	r23, r22
     ab0:	66 27       	eor	r22, r22
     ab2:	e5 01       	movw	r28, r10
     ab4:	c6 0f       	add	r28, r22
     ab6:	d7 1f       	adc	r29, r23
     ab8:	be 01       	movw	r22, r28
     aba:	dd 0f       	add	r29, r29
     abc:	88 0b       	sbc	r24, r24
     abe:	99 0b       	sbc	r25, r25
     ac0:	e0 d1       	rcall	.+960    	; 0xe82 <__floatsisf>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	45 d1       	rcall	.+650    	; 0xd56 <__divsf3>
	rtouch -= 1;
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 e8       	ldi	r20, 0x80	; 128
     ad2:	5f e3       	ldi	r21, 0x3F	; 63
     ad4:	db d0       	rcall	.+438    	; 0xc8c <__subsf3>
     ad6:	6b 01       	movw	r12, r22
	//rtouch *= readTouchY();
	rtouch *= readTouchX();
     ad8:	7c 01       	movw	r14, r24
     ada:	39 df       	rcall	.-398    	; 0x94e <readTouchX>
     adc:	bc 01       	movw	r22, r24
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	cd d1       	rcall	.+922    	; 0xe7e <__floatunsisf>
     ae4:	a7 01       	movw	r20, r14
     ae6:	96 01       	movw	r18, r12
	rtouch *= 330;
     ae8:	58 d2       	rcall	.+1200   	; 0xf9a <__mulsf3>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	45 ea       	ldi	r20, 0xA5	; 165
	rtouch /= 1024;
	
	return rtouch; //Return the pressure value
     af0:	53 e4       	ldi	r21, 0x43	; 67
     af2:	53 d2       	rcall	.+1190   	; 0xf9a <__mulsf3>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e8       	ldi	r20, 0x80	; 128
     afa:	5a e3       	ldi	r21, 0x3A	; 58
     afc:	4e d2       	rcall	.+1180   	; 0xf9a <__mulsf3>
     afe:	93 d1       	rcall	.+806    	; 0xe26 <__fixunssfsi>
}
     b00:	cb 01       	movw	r24, r22
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	bf 90       	pop	r11
     b12:	af 90       	pop	r10
     b14:	08 95       	ret

00000b16 <pressureY>:

uint16_t pressureY(void) {
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
	// Set X+ output to ground
	DDRA |= (1<<PINA2);
     b28:	0a 9a       	sbi	0x01, 2	; 1
	PORTA &= ~(1<<PINA2);
     b2a:	12 98       	cbi	0x02, 2	; 2
	
	// Set Y- output to VCC
	DDRA |= (1<<PINA3);
     b2c:	0b 9a       	sbi	0x01, 3	; 1
	PORTA |= (1<<PINA3);
     b2e:	13 9a       	sbi	0x02, 3	; 2
	
	// Set X- and Y+ as inputs and to ground
	DDRA &= ~((1<<PINA0) | (1<<PINA1));
     b30:	81 b1       	in	r24, 0x01	; 1
     b32:	8c 7f       	andi	r24, 0xFC	; 252
     b34:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~((1<<PINA0) | (1<<PINA1));
     b36:	82 b1       	in	r24, 0x02	; 2
     b38:	8c 7f       	andi	r24, 0xFC	; 252
     b3a:	82 b9       	out	0x02, r24	; 2
	
	ADMUX = (1<<REFS0) + 1; //Read the value of X-
     b3c:	4c e7       	ldi	r20, 0x7C	; 124
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	81 e4       	ldi	r24, 0x41	; 65
     b42:	da 01       	movw	r26, r20
     b44:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);
     b46:	ea e7       	ldi	r30, 0x7A	; 122
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	80 64       	ori	r24, 0x40	; 64
     b4e:	80 83       	st	Z, r24
     b50:	cf e1       	ldi	r28, 0x1F	; 31
     b52:	d3 e0       	ldi	r29, 0x03	; 3
     b54:	21 97       	sbiw	r28, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <pressureY+0x3e>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <pressureY+0x44>
     b5a:	00 00       	nop
	_delay_us(200);
	int z1 = ADCL;	//Read the high
     b5c:	28 e7       	ldi	r18, 0x78	; 120
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	d9 01       	movw	r26, r18
     b62:	cc 91       	ld	r28, X
     b64:	ac 2e       	mov	r10, r28
     b66:	b1 2c       	mov	r11, r1
	z1 = z1 + (ADCH<<8); //Read the low
     b68:	a9 e7       	ldi	r26, 0x79	; 121
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	1c 91       	ld	r17, X
	ADMUX = (1<<REFS0); //Read the value of Y+
     b6e:	80 e4       	ldi	r24, 0x40	; 64
     b70:	ea 01       	movw	r28, r20
     b72:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC);
     b74:	80 81       	ld	r24, Z
     b76:	80 64       	ori	r24, 0x40	; 64
     b78:	80 83       	st	Z, r24
     b7a:	ef e1       	ldi	r30, 0x1F	; 31
     b7c:	f3 e0       	ldi	r31, 0x03	; 3
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <pressureY+0x68>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <pressureY+0x6e>
     b84:	00 00       	nop
	_delay_us(200);
	int z2 = ADCL; //Read the high
     b86:	e9 01       	movw	r28, r18
     b88:	88 81       	ld	r24, Y
	z2 = z2 + (ADCH<<8); //Read the low
     b8a:	6c 91       	ld	r22, X

	// now read the x
	float rtouch;
	rtouch = z2;
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	76 2f       	mov	r23, r22
     b90:	66 27       	eor	r22, r22
     b92:	68 0f       	add	r22, r24
     b94:	71 1d       	adc	r23, r1
     b96:	07 2e       	mov	r0, r23
     b98:	00 0c       	add	r0, r0
     b9a:	88 0b       	sbc	r24, r24
     b9c:	99 0b       	sbc	r25, r25
     b9e:	71 d1       	rcall	.+738    	; 0xe82 <__floatsisf>
     ba0:	6b 01       	movw	r12, r22
     ba2:	7c 01       	movw	r14, r24
	rtouch /= z1;
     ba4:	61 2f       	mov	r22, r17
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	76 2f       	mov	r23, r22
     baa:	66 27       	eor	r22, r22
     bac:	e5 01       	movw	r28, r10
     bae:	c6 0f       	add	r28, r22
     bb0:	d7 1f       	adc	r29, r23
     bb2:	be 01       	movw	r22, r28
     bb4:	dd 0f       	add	r29, r29
     bb6:	88 0b       	sbc	r24, r24
     bb8:	99 0b       	sbc	r25, r25
     bba:	63 d1       	rcall	.+710    	; 0xe82 <__floatsisf>
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
     bc0:	c7 01       	movw	r24, r14
     bc2:	b6 01       	movw	r22, r12
     bc4:	c8 d0       	rcall	.+400    	; 0xd56 <__divsf3>
	rtouch -= 1;
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e8       	ldi	r20, 0x80	; 128
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	5e d0       	rcall	.+188    	; 0xc8c <__subsf3>
     bd0:	6b 01       	movw	r12, r22
	//rtouch *= readTouchY();
	rtouch *= readTouchY();
     bd2:	7c 01       	movw	r14, r24
     bd4:	f2 de       	rcall	.-540    	; 0x9ba <readTouchY>
     bd6:	bc 01       	movw	r22, r24
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	50 d1       	rcall	.+672    	; 0xe7e <__floatunsisf>
     bde:	a7 01       	movw	r20, r14
     be0:	96 01       	movw	r18, r12
	rtouch *= 330;
     be2:	db d1       	rcall	.+950    	; 0xf9a <__mulsf3>
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	45 ea       	ldi	r20, 0xA5	; 165
	rtouch /= 1024;
	
	return rtouch; //Return the pressure value
     bea:	53 e4       	ldi	r21, 0x43	; 67
     bec:	d6 d1       	rcall	.+940    	; 0xf9a <__mulsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e8       	ldi	r20, 0x80	; 128
     bf4:	5a e3       	ldi	r21, 0x3A	; 58
     bf6:	d1 d1       	rcall	.+930    	; 0xf9a <__mulsf3>
     bf8:	16 d1       	rcall	.+556    	; 0xe26 <__fixunssfsi>
}
     bfa:	cb 01       	movw	r24, r22
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	08 95       	ret

00000c10 <Tick5>:

enum States5 { Init5 } State5;

void Tick5() {
	switch (State5) {
     c10:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <State5>
     c14:	81 11       	cpse	r24, r1
     c16:	1f c0       	rjmp	.+62     	; 0xc56 <Tick5+0x46>
		case Init5:
		press = pressureX();
     c18:	01 df       	rcall	.-510    	; 0xa1c <pressureX>
     c1a:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <press+0x1>
     c1e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <press>
		if((press < 10) || (press > 1000)){
     c22:	0a 97       	sbiw	r24, 0x0a	; 10
     c24:	8f 3d       	cpi	r24, 0xDF	; 223
     c26:	93 40       	sbci	r25, 0x03	; 3
			
		}
		else{
			press = pressureX();
     c28:	a0 f4       	brcc	.+40     	; 0xc52 <Tick5+0x42>
     c2a:	f8 de       	rcall	.-528    	; 0xa1c <pressureX>
     c2c:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <press+0x1>
     c30:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <press>
			x = readTouchX(); 
     c34:	8c de       	rcall	.-744    	; 0x94e <readTouchX>
     c36:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x+0x1>
     c3a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x>
			press = pressureY();
     c3e:	6b df       	rcall	.-298    	; 0xb16 <pressureY>
     c40:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <press+0x1>
     c44:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <press>
			y = readTouchY(); 
     c48:	b8 de       	rcall	.-656    	; 0x9ba <readTouchY>
     c4a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     c4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			
		}
		State5 = Init5;
     c52:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <State5>
     c56:	08 95       	ret

00000c58 <main>:
	}
}

int main(void)
{
	SetupPorts(); // use PortB for LCD interface
     c58:	27 db       	rcall	.-2482   	; 0x2a8 <SetupPorts>
	OpenSPI(); // start communication to TFT
     c5a:	3c db       	rcall	.-2440   	; 0x2d4 <OpenSPI>
	InitDisplay(); // initialize TFT controller
     c5c:	5c db       	rcall	.-2376   	; 0x316 <InitDisplay>
     c5e:	89 db       	rcall	.-2286   	; 0x372 <ClearScreen>
	ClearScreen();
     c60:	8e e0       	ldi	r24, 0x0E	; 14
	SetOrientation(270);
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	c1 db       	rcall	.-2174   	; 0x3e8 <SetOrientation>
     c66:	1a b8       	out	0x0a, r1	; 10
     c68:	8f ef       	ldi	r24, 0xFF	; 255
	
	//char *str1 = "HALLOOOOO"; // text to display
	//GotoXY(36,12); // position text cursor
	//WriteString(str1,BLUE); // display text
	
	DDRD = 0x00; PORTD = 0xFF; // Configure PORTD as input, initialize to 1s
     c6a:	8b b9       	out	0x0b, r24	; 11
     c6c:	87 b9       	out	0x07, r24	; 7
     c6e:	18 b8       	out	0x08, r1	; 8
	DDRC = 0xFF; PORTC = 0x00; // Configure PORTC as outputs, initialize to 0s
     c70:	11 b8       	out	0x01, r1	; 1
     c72:	82 b9       	out	0x02, r24	; 2
	
	DDRA = 0x00;
     c74:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <State>
	PORTA = 0xFF;
	
	State = Init;
	State1=Init1;
     c78:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <State1>
	
	ADC_init();
    while (1) 
    {
		Tick();
     c7c:	74 dc       	rcall	.-1816   	; 0x566 <ADC_init>
     c7e:	93 dc       	rcall	.-1754   	; 0x5a6 <Tick>
		Tick1();
     c80:	d0 dc       	rcall	.-1632   	; 0x622 <Tick1>
     c82:	ee dc       	rcall	.-1572   	; 0x660 <Tick2>
		Tick2();
     c84:	4d de       	rcall	.-870    	; 0x920 <Tick3>
     c86:	ae dc       	rcall	.-1700   	; 0x5e4 <Tick4>
		Tick3();
     c88:	c3 df       	rcall	.-122    	; 0xc10 <Tick5>
     c8a:	f9 cf       	rjmp	.-14     	; 0xc7e <main+0x26>

00000c8c <__subsf3>:
		Tick4();
     c8c:	50 58       	subi	r21, 0x80	; 128

00000c8e <__addsf3>:
     c8e:	bb 27       	eor	r27, r27
		Tick5();
     c90:	aa 27       	eor	r26, r26
     c92:	0e d0       	rcall	.+28     	; 0xcb0 <__addsf3x>
     c94:	48 c1       	rjmp	.+656    	; 0xf26 <__fp_round>
     c96:	39 d1       	rcall	.+626    	; 0xf0a <__fp_pscA>
     c98:	30 f0       	brcs	.+12     	; 0xca6 <__addsf3+0x18>
     c9a:	3e d1       	rcall	.+636    	; 0xf18 <__fp_pscB>
     c9c:	20 f0       	brcs	.+8      	; 0xca6 <__addsf3+0x18>
     c9e:	31 f4       	brne	.+12     	; 0xcac <__addsf3+0x1e>
     ca0:	9f 3f       	cpi	r25, 0xFF	; 255
     ca2:	11 f4       	brne	.+4      	; 0xca8 <__addsf3+0x1a>
     ca4:	1e f4       	brtc	.+6      	; 0xcac <__addsf3+0x1e>
     ca6:	2e c1       	rjmp	.+604    	; 0xf04 <__fp_nan>
     ca8:	0e f4       	brtc	.+2      	; 0xcac <__addsf3+0x1e>
     caa:	e0 95       	com	r30
     cac:	e7 fb       	bst	r30, 7
     cae:	24 c1       	rjmp	.+584    	; 0xef8 <__fp_inf>

00000cb0 <__addsf3x>:
     cb0:	e9 2f       	mov	r30, r25
     cb2:	4a d1       	rcall	.+660    	; 0xf48 <__fp_split3>
     cb4:	80 f3       	brcs	.-32     	; 0xc96 <__addsf3+0x8>
     cb6:	ba 17       	cp	r27, r26
     cb8:	62 07       	cpc	r22, r18
     cba:	73 07       	cpc	r23, r19
     cbc:	84 07       	cpc	r24, r20
     cbe:	95 07       	cpc	r25, r21
     cc0:	18 f0       	brcs	.+6      	; 0xcc8 <__addsf3x+0x18>
     cc2:	71 f4       	brne	.+28     	; 0xce0 <__addsf3x+0x30>
     cc4:	9e f5       	brtc	.+102    	; 0xd2c <__addsf3x+0x7c>
     cc6:	62 c1       	rjmp	.+708    	; 0xf8c <__fp_zero>
     cc8:	0e f4       	brtc	.+2      	; 0xccc <__addsf3x+0x1c>
     cca:	e0 95       	com	r30
     ccc:	0b 2e       	mov	r0, r27
     cce:	ba 2f       	mov	r27, r26
     cd0:	a0 2d       	mov	r26, r0
     cd2:	0b 01       	movw	r0, r22
     cd4:	b9 01       	movw	r22, r18
     cd6:	90 01       	movw	r18, r0
     cd8:	0c 01       	movw	r0, r24
     cda:	ca 01       	movw	r24, r20
     cdc:	a0 01       	movw	r20, r0
     cde:	11 24       	eor	r1, r1
     ce0:	ff 27       	eor	r31, r31
     ce2:	59 1b       	sub	r21, r25
     ce4:	99 f0       	breq	.+38     	; 0xd0c <__addsf3x+0x5c>
     ce6:	59 3f       	cpi	r21, 0xF9	; 249
     ce8:	50 f4       	brcc	.+20     	; 0xcfe <__addsf3x+0x4e>
     cea:	50 3e       	cpi	r21, 0xE0	; 224
     cec:	68 f1       	brcs	.+90     	; 0xd48 <__addsf3x+0x98>
     cee:	1a 16       	cp	r1, r26
     cf0:	f0 40       	sbci	r31, 0x00	; 0
     cf2:	a2 2f       	mov	r26, r18
     cf4:	23 2f       	mov	r18, r19
     cf6:	34 2f       	mov	r19, r20
     cf8:	44 27       	eor	r20, r20
     cfa:	58 5f       	subi	r21, 0xF8	; 248
     cfc:	f3 cf       	rjmp	.-26     	; 0xce4 <__addsf3x+0x34>
     cfe:	46 95       	lsr	r20
     d00:	37 95       	ror	r19
     d02:	27 95       	ror	r18
     d04:	a7 95       	ror	r26
     d06:	f0 40       	sbci	r31, 0x00	; 0
     d08:	53 95       	inc	r21
     d0a:	c9 f7       	brne	.-14     	; 0xcfe <__addsf3x+0x4e>
     d0c:	7e f4       	brtc	.+30     	; 0xd2c <__addsf3x+0x7c>
     d0e:	1f 16       	cp	r1, r31
     d10:	ba 0b       	sbc	r27, r26
     d12:	62 0b       	sbc	r22, r18
     d14:	73 0b       	sbc	r23, r19
     d16:	84 0b       	sbc	r24, r20
     d18:	ba f0       	brmi	.+46     	; 0xd48 <__addsf3x+0x98>
     d1a:	91 50       	subi	r25, 0x01	; 1
     d1c:	a1 f0       	breq	.+40     	; 0xd46 <__addsf3x+0x96>
     d1e:	ff 0f       	add	r31, r31
     d20:	bb 1f       	adc	r27, r27
     d22:	66 1f       	adc	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	88 1f       	adc	r24, r24
     d28:	c2 f7       	brpl	.-16     	; 0xd1a <__addsf3x+0x6a>
     d2a:	0e c0       	rjmp	.+28     	; 0xd48 <__addsf3x+0x98>
     d2c:	ba 0f       	add	r27, r26
     d2e:	62 1f       	adc	r22, r18
     d30:	73 1f       	adc	r23, r19
     d32:	84 1f       	adc	r24, r20
     d34:	48 f4       	brcc	.+18     	; 0xd48 <__addsf3x+0x98>
     d36:	87 95       	ror	r24
     d38:	77 95       	ror	r23
     d3a:	67 95       	ror	r22
     d3c:	b7 95       	ror	r27
     d3e:	f7 95       	ror	r31
     d40:	9e 3f       	cpi	r25, 0xFE	; 254
     d42:	08 f0       	brcs	.+2      	; 0xd46 <__addsf3x+0x96>
     d44:	b3 cf       	rjmp	.-154    	; 0xcac <__addsf3+0x1e>
     d46:	93 95       	inc	r25
     d48:	88 0f       	add	r24, r24
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <__addsf3x+0x9e>
     d4c:	99 27       	eor	r25, r25
     d4e:	ee 0f       	add	r30, r30
     d50:	97 95       	ror	r25
     d52:	87 95       	ror	r24
     d54:	08 95       	ret

00000d56 <__divsf3>:
     d56:	0c d0       	rcall	.+24     	; 0xd70 <__divsf3x>
     d58:	e6 c0       	rjmp	.+460    	; 0xf26 <__fp_round>
     d5a:	de d0       	rcall	.+444    	; 0xf18 <__fp_pscB>
     d5c:	40 f0       	brcs	.+16     	; 0xd6e <__divsf3+0x18>
     d5e:	d5 d0       	rcall	.+426    	; 0xf0a <__fp_pscA>
     d60:	30 f0       	brcs	.+12     	; 0xd6e <__divsf3+0x18>
     d62:	21 f4       	brne	.+8      	; 0xd6c <__divsf3+0x16>
     d64:	5f 3f       	cpi	r21, 0xFF	; 255
     d66:	19 f0       	breq	.+6      	; 0xd6e <__divsf3+0x18>
     d68:	c7 c0       	rjmp	.+398    	; 0xef8 <__fp_inf>
     d6a:	51 11       	cpse	r21, r1
     d6c:	10 c1       	rjmp	.+544    	; 0xf8e <__fp_szero>
     d6e:	ca c0       	rjmp	.+404    	; 0xf04 <__fp_nan>

00000d70 <__divsf3x>:
     d70:	eb d0       	rcall	.+470    	; 0xf48 <__fp_split3>
     d72:	98 f3       	brcs	.-26     	; 0xd5a <__divsf3+0x4>

00000d74 <__divsf3_pse>:
     d74:	99 23       	and	r25, r25
     d76:	c9 f3       	breq	.-14     	; 0xd6a <__divsf3+0x14>
     d78:	55 23       	and	r21, r21
     d7a:	b1 f3       	breq	.-20     	; 0xd68 <__divsf3+0x12>
     d7c:	95 1b       	sub	r25, r21
     d7e:	55 0b       	sbc	r21, r21
     d80:	bb 27       	eor	r27, r27
     d82:	aa 27       	eor	r26, r26
     d84:	62 17       	cp	r22, r18
     d86:	73 07       	cpc	r23, r19
     d88:	84 07       	cpc	r24, r20
     d8a:	38 f0       	brcs	.+14     	; 0xd9a <__divsf3_pse+0x26>
     d8c:	9f 5f       	subi	r25, 0xFF	; 255
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	44 1f       	adc	r20, r20
     d96:	aa 1f       	adc	r26, r26
     d98:	a9 f3       	breq	.-22     	; 0xd84 <__divsf3_pse+0x10>
     d9a:	33 d0       	rcall	.+102    	; 0xe02 <__divsf3_pse+0x8e>
     d9c:	0e 2e       	mov	r0, r30
     d9e:	3a f0       	brmi	.+14     	; 0xdae <__divsf3_pse+0x3a>
     da0:	e0 e8       	ldi	r30, 0x80	; 128
     da2:	30 d0       	rcall	.+96     	; 0xe04 <__divsf3_pse+0x90>
     da4:	91 50       	subi	r25, 0x01	; 1
     da6:	50 40       	sbci	r21, 0x00	; 0
     da8:	e6 95       	lsr	r30
     daa:	00 1c       	adc	r0, r0
     dac:	ca f7       	brpl	.-14     	; 0xda0 <__divsf3_pse+0x2c>
     dae:	29 d0       	rcall	.+82     	; 0xe02 <__divsf3_pse+0x8e>
     db0:	fe 2f       	mov	r31, r30
     db2:	27 d0       	rcall	.+78     	; 0xe02 <__divsf3_pse+0x8e>
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	88 1f       	adc	r24, r24
     dba:	bb 1f       	adc	r27, r27
     dbc:	26 17       	cp	r18, r22
     dbe:	37 07       	cpc	r19, r23
     dc0:	48 07       	cpc	r20, r24
     dc2:	ab 07       	cpc	r26, r27
     dc4:	b0 e8       	ldi	r27, 0x80	; 128
     dc6:	09 f0       	breq	.+2      	; 0xdca <__divsf3_pse+0x56>
     dc8:	bb 0b       	sbc	r27, r27
     dca:	80 2d       	mov	r24, r0
     dcc:	bf 01       	movw	r22, r30
     dce:	ff 27       	eor	r31, r31
     dd0:	93 58       	subi	r25, 0x83	; 131
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	2a f0       	brmi	.+10     	; 0xde0 <__divsf3_pse+0x6c>
     dd6:	9e 3f       	cpi	r25, 0xFE	; 254
     dd8:	51 05       	cpc	r21, r1
     dda:	68 f0       	brcs	.+26     	; 0xdf6 <__divsf3_pse+0x82>
     ddc:	8d c0       	rjmp	.+282    	; 0xef8 <__fp_inf>
     dde:	d7 c0       	rjmp	.+430    	; 0xf8e <__fp_szero>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	ec f3       	brlt	.-6      	; 0xdde <__divsf3_pse+0x6a>
     de4:	98 3e       	cpi	r25, 0xE8	; 232
     de6:	dc f3       	brlt	.-10     	; 0xdde <__divsf3_pse+0x6a>
     de8:	86 95       	lsr	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f7 95       	ror	r31
     df2:	9f 5f       	subi	r25, 0xFF	; 255
     df4:	c9 f7       	brne	.-14     	; 0xde8 <__divsf3_pse+0x74>
     df6:	88 0f       	add	r24, r24
     df8:	91 1d       	adc	r25, r1
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	97 f9       	bld	r25, 7
     e00:	08 95       	ret
     e02:	e1 e0       	ldi	r30, 0x01	; 1
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	bb 1f       	adc	r27, r27
     e0c:	62 17       	cp	r22, r18
     e0e:	73 07       	cpc	r23, r19
     e10:	84 07       	cpc	r24, r20
     e12:	ba 07       	cpc	r27, r26
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__divsf3_pse+0xaa>
     e16:	62 1b       	sub	r22, r18
     e18:	73 0b       	sbc	r23, r19
     e1a:	84 0b       	sbc	r24, r20
     e1c:	ba 0b       	sbc	r27, r26
     e1e:	ee 1f       	adc	r30, r30
     e20:	88 f7       	brcc	.-30     	; 0xe04 <__divsf3_pse+0x90>
     e22:	e0 95       	com	r30
     e24:	08 95       	ret

00000e26 <__fixunssfsi>:
     e26:	98 d0       	rcall	.+304    	; 0xf58 <__fp_splitA>
     e28:	88 f0       	brcs	.+34     	; 0xe4c <__fixunssfsi+0x26>
     e2a:	9f 57       	subi	r25, 0x7F	; 127
     e2c:	90 f0       	brcs	.+36     	; 0xe52 <__fixunssfsi+0x2c>
     e2e:	b9 2f       	mov	r27, r25
     e30:	99 27       	eor	r25, r25
     e32:	b7 51       	subi	r27, 0x17	; 23
     e34:	a0 f0       	brcs	.+40     	; 0xe5e <__fixunssfsi+0x38>
     e36:	d1 f0       	breq	.+52     	; 0xe6c <__fixunssfsi+0x46>
     e38:	66 0f       	add	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	1a f0       	brmi	.+6      	; 0xe48 <__fixunssfsi+0x22>
     e42:	ba 95       	dec	r27
     e44:	c9 f7       	brne	.-14     	; 0xe38 <__fixunssfsi+0x12>
     e46:	12 c0       	rjmp	.+36     	; 0xe6c <__fixunssfsi+0x46>
     e48:	b1 30       	cpi	r27, 0x01	; 1
     e4a:	81 f0       	breq	.+32     	; 0xe6c <__fixunssfsi+0x46>
     e4c:	9f d0       	rcall	.+318    	; 0xf8c <__fp_zero>
     e4e:	b1 e0       	ldi	r27, 0x01	; 1
     e50:	08 95       	ret
     e52:	9c c0       	rjmp	.+312    	; 0xf8c <__fp_zero>
     e54:	67 2f       	mov	r22, r23
     e56:	78 2f       	mov	r23, r24
     e58:	88 27       	eor	r24, r24
     e5a:	b8 5f       	subi	r27, 0xF8	; 248
     e5c:	39 f0       	breq	.+14     	; 0xe6c <__fixunssfsi+0x46>
     e5e:	b9 3f       	cpi	r27, 0xF9	; 249
     e60:	cc f3       	brlt	.-14     	; 0xe54 <__fixunssfsi+0x2e>
     e62:	86 95       	lsr	r24
     e64:	77 95       	ror	r23
     e66:	67 95       	ror	r22
     e68:	b3 95       	inc	r27
     e6a:	d9 f7       	brne	.-10     	; 0xe62 <__fixunssfsi+0x3c>
     e6c:	3e f4       	brtc	.+14     	; 0xe7c <__fixunssfsi+0x56>
     e6e:	90 95       	com	r25
     e70:	80 95       	com	r24
     e72:	70 95       	com	r23
     e74:	61 95       	neg	r22
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	8f 4f       	sbci	r24, 0xFF	; 255
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	08 95       	ret

00000e7e <__floatunsisf>:
     e7e:	e8 94       	clt
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <__floatsisf+0x12>

00000e82 <__floatsisf>:
     e82:	97 fb       	bst	r25, 7
     e84:	3e f4       	brtc	.+14     	; 0xe94 <__floatsisf+0x12>
     e86:	90 95       	com	r25
     e88:	80 95       	com	r24
     e8a:	70 95       	com	r23
     e8c:	61 95       	neg	r22
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8f 4f       	sbci	r24, 0xFF	; 255
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	99 23       	and	r25, r25
     e96:	a9 f0       	breq	.+42     	; 0xec2 <__floatsisf+0x40>
     e98:	f9 2f       	mov	r31, r25
     e9a:	96 e9       	ldi	r25, 0x96	; 150
     e9c:	bb 27       	eor	r27, r27
     e9e:	93 95       	inc	r25
     ea0:	f6 95       	lsr	r31
     ea2:	87 95       	ror	r24
     ea4:	77 95       	ror	r23
     ea6:	67 95       	ror	r22
     ea8:	b7 95       	ror	r27
     eaa:	f1 11       	cpse	r31, r1
     eac:	f8 cf       	rjmp	.-16     	; 0xe9e <__floatsisf+0x1c>
     eae:	fa f4       	brpl	.+62     	; 0xeee <__floatsisf+0x6c>
     eb0:	bb 0f       	add	r27, r27
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <__floatsisf+0x36>
     eb4:	60 ff       	sbrs	r22, 0
     eb6:	1b c0       	rjmp	.+54     	; 0xeee <__floatsisf+0x6c>
     eb8:	6f 5f       	subi	r22, 0xFF	; 255
     eba:	7f 4f       	sbci	r23, 0xFF	; 255
     ebc:	8f 4f       	sbci	r24, 0xFF	; 255
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <__floatsisf+0x6c>
     ec2:	88 23       	and	r24, r24
     ec4:	11 f0       	breq	.+4      	; 0xeca <__floatsisf+0x48>
     ec6:	96 e9       	ldi	r25, 0x96	; 150
     ec8:	11 c0       	rjmp	.+34     	; 0xeec <__floatsisf+0x6a>
     eca:	77 23       	and	r23, r23
     ecc:	21 f0       	breq	.+8      	; 0xed6 <__floatsisf+0x54>
     ece:	9e e8       	ldi	r25, 0x8E	; 142
     ed0:	87 2f       	mov	r24, r23
     ed2:	76 2f       	mov	r23, r22
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <__floatsisf+0x5e>
     ed6:	66 23       	and	r22, r22
     ed8:	71 f0       	breq	.+28     	; 0xef6 <__floatsisf+0x74>
     eda:	96 e8       	ldi	r25, 0x86	; 134
     edc:	86 2f       	mov	r24, r22
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	2a f0       	brmi	.+10     	; 0xeee <__floatsisf+0x6c>
     ee4:	9a 95       	dec	r25
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	da f7       	brpl	.-10     	; 0xee4 <__floatsisf+0x62>
     eee:	88 0f       	add	r24, r24
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret

00000ef8 <__fp_inf>:
     ef8:	97 f9       	bld	r25, 7
     efa:	9f 67       	ori	r25, 0x7F	; 127
     efc:	80 e8       	ldi	r24, 0x80	; 128
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	08 95       	ret

00000f04 <__fp_nan>:
     f04:	9f ef       	ldi	r25, 0xFF	; 255
     f06:	80 ec       	ldi	r24, 0xC0	; 192
     f08:	08 95       	ret

00000f0a <__fp_pscA>:
     f0a:	00 24       	eor	r0, r0
     f0c:	0a 94       	dec	r0
     f0e:	16 16       	cp	r1, r22
     f10:	17 06       	cpc	r1, r23
     f12:	18 06       	cpc	r1, r24
     f14:	09 06       	cpc	r0, r25
     f16:	08 95       	ret

00000f18 <__fp_pscB>:
     f18:	00 24       	eor	r0, r0
     f1a:	0a 94       	dec	r0
     f1c:	12 16       	cp	r1, r18
     f1e:	13 06       	cpc	r1, r19
     f20:	14 06       	cpc	r1, r20
     f22:	05 06       	cpc	r0, r21
     f24:	08 95       	ret

00000f26 <__fp_round>:
     f26:	09 2e       	mov	r0, r25
     f28:	03 94       	inc	r0
     f2a:	00 0c       	add	r0, r0
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__fp_round+0xc>
     f2e:	88 23       	and	r24, r24
     f30:	52 f0       	brmi	.+20     	; 0xf46 <__fp_round+0x20>
     f32:	bb 0f       	add	r27, r27
     f34:	40 f4       	brcc	.+16     	; 0xf46 <__fp_round+0x20>
     f36:	bf 2b       	or	r27, r31
     f38:	11 f4       	brne	.+4      	; 0xf3e <__fp_round+0x18>
     f3a:	60 ff       	sbrs	r22, 0
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__fp_round+0x20>
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	08 95       	ret

00000f48 <__fp_split3>:
     f48:	57 fd       	sbrc	r21, 7
     f4a:	90 58       	subi	r25, 0x80	; 128
     f4c:	44 0f       	add	r20, r20
     f4e:	55 1f       	adc	r21, r21
     f50:	59 f0       	breq	.+22     	; 0xf68 <__fp_splitA+0x10>
     f52:	5f 3f       	cpi	r21, 0xFF	; 255
     f54:	71 f0       	breq	.+28     	; 0xf72 <__fp_splitA+0x1a>
     f56:	47 95       	ror	r20

00000f58 <__fp_splitA>:
     f58:	88 0f       	add	r24, r24
     f5a:	97 fb       	bst	r25, 7
     f5c:	99 1f       	adc	r25, r25
     f5e:	61 f0       	breq	.+24     	; 0xf78 <__fp_splitA+0x20>
     f60:	9f 3f       	cpi	r25, 0xFF	; 255
     f62:	79 f0       	breq	.+30     	; 0xf82 <__fp_splitA+0x2a>
     f64:	87 95       	ror	r24
     f66:	08 95       	ret
     f68:	12 16       	cp	r1, r18
     f6a:	13 06       	cpc	r1, r19
     f6c:	14 06       	cpc	r1, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	f2 cf       	rjmp	.-28     	; 0xf56 <__fp_split3+0xe>
     f72:	46 95       	lsr	r20
     f74:	f1 df       	rcall	.-30     	; 0xf58 <__fp_splitA>
     f76:	08 c0       	rjmp	.+16     	; 0xf88 <__fp_splitA+0x30>
     f78:	16 16       	cp	r1, r22
     f7a:	17 06       	cpc	r1, r23
     f7c:	18 06       	cpc	r1, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	f1 cf       	rjmp	.-30     	; 0xf64 <__fp_splitA+0xc>
     f82:	86 95       	lsr	r24
     f84:	71 05       	cpc	r23, r1
     f86:	61 05       	cpc	r22, r1
     f88:	08 94       	sec
     f8a:	08 95       	ret

00000f8c <__fp_zero>:
     f8c:	e8 94       	clt

00000f8e <__fp_szero>:
     f8e:	bb 27       	eor	r27, r27
     f90:	66 27       	eor	r22, r22
     f92:	77 27       	eor	r23, r23
     f94:	cb 01       	movw	r24, r22
     f96:	97 f9       	bld	r25, 7
     f98:	08 95       	ret

00000f9a <__mulsf3>:
     f9a:	0b d0       	rcall	.+22     	; 0xfb2 <__mulsf3x>
     f9c:	c4 cf       	rjmp	.-120    	; 0xf26 <__fp_round>
     f9e:	b5 df       	rcall	.-150    	; 0xf0a <__fp_pscA>
     fa0:	28 f0       	brcs	.+10     	; 0xfac <__mulsf3+0x12>
     fa2:	ba df       	rcall	.-140    	; 0xf18 <__fp_pscB>
     fa4:	18 f0       	brcs	.+6      	; 0xfac <__mulsf3+0x12>
     fa6:	95 23       	and	r25, r21
     fa8:	09 f0       	breq	.+2      	; 0xfac <__mulsf3+0x12>
     faa:	a6 cf       	rjmp	.-180    	; 0xef8 <__fp_inf>
     fac:	ab cf       	rjmp	.-170    	; 0xf04 <__fp_nan>
     fae:	11 24       	eor	r1, r1
     fb0:	ee cf       	rjmp	.-36     	; 0xf8e <__fp_szero>

00000fb2 <__mulsf3x>:
     fb2:	ca df       	rcall	.-108    	; 0xf48 <__fp_split3>
     fb4:	a0 f3       	brcs	.-24     	; 0xf9e <__mulsf3+0x4>

00000fb6 <__mulsf3_pse>:
     fb6:	95 9f       	mul	r25, r21
     fb8:	d1 f3       	breq	.-12     	; 0xfae <__mulsf3+0x14>
     fba:	95 0f       	add	r25, r21
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	55 1f       	adc	r21, r21
     fc0:	62 9f       	mul	r22, r18
     fc2:	f0 01       	movw	r30, r0
     fc4:	72 9f       	mul	r23, r18
     fc6:	bb 27       	eor	r27, r27
     fc8:	f0 0d       	add	r31, r0
     fca:	b1 1d       	adc	r27, r1
     fcc:	63 9f       	mul	r22, r19
     fce:	aa 27       	eor	r26, r26
     fd0:	f0 0d       	add	r31, r0
     fd2:	b1 1d       	adc	r27, r1
     fd4:	aa 1f       	adc	r26, r26
     fd6:	64 9f       	mul	r22, r20
     fd8:	66 27       	eor	r22, r22
     fda:	b0 0d       	add	r27, r0
     fdc:	a1 1d       	adc	r26, r1
     fde:	66 1f       	adc	r22, r22
     fe0:	82 9f       	mul	r24, r18
     fe2:	22 27       	eor	r18, r18
     fe4:	b0 0d       	add	r27, r0
     fe6:	a1 1d       	adc	r26, r1
     fe8:	62 1f       	adc	r22, r18
     fea:	73 9f       	mul	r23, r19
     fec:	b0 0d       	add	r27, r0
     fee:	a1 1d       	adc	r26, r1
     ff0:	62 1f       	adc	r22, r18
     ff2:	83 9f       	mul	r24, r19
     ff4:	a0 0d       	add	r26, r0
     ff6:	61 1d       	adc	r22, r1
     ff8:	22 1f       	adc	r18, r18
     ffa:	74 9f       	mul	r23, r20
     ffc:	33 27       	eor	r19, r19
     ffe:	a0 0d       	add	r26, r0
    1000:	61 1d       	adc	r22, r1
    1002:	23 1f       	adc	r18, r19
    1004:	84 9f       	mul	r24, r20
    1006:	60 0d       	add	r22, r0
    1008:	21 1d       	adc	r18, r1
    100a:	82 2f       	mov	r24, r18
    100c:	76 2f       	mov	r23, r22
    100e:	6a 2f       	mov	r22, r26
    1010:	11 24       	eor	r1, r1
    1012:	9f 57       	subi	r25, 0x7F	; 127
    1014:	50 40       	sbci	r21, 0x00	; 0
    1016:	8a f0       	brmi	.+34     	; 0x103a <__mulsf3_pse+0x84>
    1018:	e1 f0       	breq	.+56     	; 0x1052 <__mulsf3_pse+0x9c>
    101a:	88 23       	and	r24, r24
    101c:	4a f0       	brmi	.+18     	; 0x1030 <__mulsf3_pse+0x7a>
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	bb 1f       	adc	r27, r27
    1024:	66 1f       	adc	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	91 50       	subi	r25, 0x01	; 1
    102c:	50 40       	sbci	r21, 0x00	; 0
    102e:	a9 f7       	brne	.-22     	; 0x101a <__mulsf3_pse+0x64>
    1030:	9e 3f       	cpi	r25, 0xFE	; 254
    1032:	51 05       	cpc	r21, r1
    1034:	70 f0       	brcs	.+28     	; 0x1052 <__mulsf3_pse+0x9c>
    1036:	60 cf       	rjmp	.-320    	; 0xef8 <__fp_inf>
    1038:	aa cf       	rjmp	.-172    	; 0xf8e <__fp_szero>
    103a:	5f 3f       	cpi	r21, 0xFF	; 255
    103c:	ec f3       	brlt	.-6      	; 0x1038 <__mulsf3_pse+0x82>
    103e:	98 3e       	cpi	r25, 0xE8	; 232
    1040:	dc f3       	brlt	.-10     	; 0x1038 <__mulsf3_pse+0x82>
    1042:	86 95       	lsr	r24
    1044:	77 95       	ror	r23
    1046:	67 95       	ror	r22
    1048:	b7 95       	ror	r27
    104a:	f7 95       	ror	r31
    104c:	e7 95       	ror	r30
    104e:	9f 5f       	subi	r25, 0xFF	; 255
    1050:	c1 f7       	brne	.-16     	; 0x1042 <__mulsf3_pse+0x8c>
    1052:	fe 2b       	or	r31, r30
    1054:	88 0f       	add	r24, r24
    1056:	91 1d       	adc	r25, r1
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <__umulhisi3>:
    1060:	a2 9f       	mul	r26, r18
    1062:	b0 01       	movw	r22, r0
    1064:	b3 9f       	mul	r27, r19
    1066:	c0 01       	movw	r24, r0
    1068:	a3 9f       	mul	r26, r19
    106a:	70 0d       	add	r23, r0
    106c:	81 1d       	adc	r24, r1
    106e:	11 24       	eor	r1, r1
    1070:	91 1d       	adc	r25, r1
    1072:	b2 9f       	mul	r27, r18
    1074:	70 0d       	add	r23, r0
    1076:	81 1d       	adc	r24, r1
    1078:	11 24       	eor	r1, r1
    107a:	91 1d       	adc	r25, r1
    107c:	08 95       	ret

0000107e <__itoa_ncheck>:
    107e:	bb 27       	eor	r27, r27
    1080:	4a 30       	cpi	r20, 0x0A	; 10
    1082:	31 f4       	brne	.+12     	; 0x1090 <__itoa_ncheck+0x12>
    1084:	99 23       	and	r25, r25
    1086:	22 f4       	brpl	.+8      	; 0x1090 <__itoa_ncheck+0x12>
    1088:	bd e2       	ldi	r27, 0x2D	; 45
    108a:	90 95       	com	r25
    108c:	81 95       	neg	r24
    108e:	9f 4f       	sbci	r25, 0xFF	; 255
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <__utoa_common>

00001092 <__utoa_ncheck>:
    1092:	bb 27       	eor	r27, r27

00001094 <__utoa_common>:
    1094:	fb 01       	movw	r30, r22
    1096:	55 27       	eor	r21, r21
    1098:	aa 27       	eor	r26, r26
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	aa 1f       	adc	r26, r26
    10a0:	a4 17       	cp	r26, r20
    10a2:	10 f0       	brcs	.+4      	; 0x10a8 <__utoa_common+0x14>
    10a4:	a4 1b       	sub	r26, r20
    10a6:	83 95       	inc	r24
    10a8:	50 51       	subi	r21, 0x10	; 16
    10aa:	b9 f7       	brne	.-18     	; 0x109a <__utoa_common+0x6>
    10ac:	a0 5d       	subi	r26, 0xD0	; 208
    10ae:	aa 33       	cpi	r26, 0x3A	; 58
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <__utoa_common+0x20>
    10b2:	a9 5d       	subi	r26, 0xD9	; 217
    10b4:	a1 93       	st	Z+, r26
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	79 f7       	brne	.-34     	; 0x1098 <__utoa_common+0x4>
    10ba:	b1 11       	cpse	r27, r1
    10bc:	b1 93       	st	Z+, r27
    10be:	11 92       	st	Z+, r1
    10c0:	cb 01       	movw	r24, r22
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <strrev>

000010c4 <strrev>:
    10c4:	dc 01       	movw	r26, r24
    10c6:	fc 01       	movw	r30, r24
    10c8:	67 2f       	mov	r22, r23
    10ca:	71 91       	ld	r23, Z+
    10cc:	77 23       	and	r23, r23
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <strrev+0x4>
    10d0:	32 97       	sbiw	r30, 0x02	; 2
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <strrev+0x18>
    10d4:	7c 91       	ld	r23, X
    10d6:	6d 93       	st	X+, r22
    10d8:	70 83       	st	Z, r23
    10da:	62 91       	ld	r22, -Z
    10dc:	ae 17       	cp	r26, r30
    10de:	bf 07       	cpc	r27, r31
    10e0:	c8 f3       	brcs	.-14     	; 0x10d4 <strrev+0x10>
    10e2:	08 95       	ret

000010e4 <_exit>:
    10e4:	f8 94       	cli

000010e6 <__stop_program>:
    10e6:	ff cf       	rjmp	.-2      	; 0x10e6 <__stop_program>
